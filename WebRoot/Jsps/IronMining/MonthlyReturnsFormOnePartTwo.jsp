<%@ page language="java" import="java.util.*,java.text.SimpleDateFormat,t4u.functions.*,t4u.beans.*,t4u.common.*" pageEncoding="utf-8"%>
<%@ taglib uri="http://packtag.sf.net" prefix="pack" %>
<%
String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
if(request.getParameter("list")!=null){
	String list=request.getParameter("list").toString().trim();
	String[] str=list.split(",");
	int systemid=Integer.parseInt(str[0].trim());
	int customerid=Integer.parseInt(str[1].trim());
	int userid=Integer.parseInt(str[2].trim());
	String language=str[3].trim();
	LoginInfoBean loginInfo=new LoginInfoBean();
	loginInfo.setSystemId(systemid);
	loginInfo.setCustomerId(customerid);
	loginInfo.setUserId(userid);
	loginInfo.setLanguage(language);
	loginInfo.setZone(str[4].trim());
	loginInfo.setOffsetMinutes(Integer.parseInt(str[5].trim()));
	loginInfo.setSystemName(str[6].trim());
	loginInfo.setCategory(str[7].trim());
	loginInfo.setStyleSheetOverride("N");
	if(str.length>8){
		loginInfo.setCustomerName(str[8].trim());
	}
	if(str.length>9){
		loginInfo.setCategoryType(str[9].trim());
	}
	if(str.length>10){
		loginInfo.setUserName(str[10].trim());
	}
	session.setAttribute("loginInfoDetails",loginInfo);	
}	
CommonFunctions cf = new CommonFunctions();
cf.checkLoginInfo((LoginInfoBean) session.getAttribute("loginInfoDetails"), session, request, response);
String responseaftersubmit="''";
if(session.getAttribute("responseaftersubmit")!=null){
   	responseaftersubmit="'"+session.getAttribute("responseaftersubmit").toString()+"'";
	session.setAttribute("responseaftersubmit",null);
}		
LoginInfoBean loginInfo = (LoginInfoBean) session.getAttribute("loginInfoDetails");
String language = loginInfo.getLanguage();
int systemId = loginInfo.getSystemId();
int customerId = loginInfo.getCustomerId();
String typeOfOre = "";
int autoGeneratedKeys = 0;
if(request.getParameter("typeOfOre") != null && !request.getParameter("typeOfOre").equals("")){
	typeOfOre = request.getParameter("typeOfOre"); 
}
if(request.getParameter("autoGeneratedKeys") != null && !request.getParameter("autoGeneratedKeys").equals("")){
	autoGeneratedKeys = Integer.parseInt(request.getParameter("autoGeneratedKeys"));
}
int custId= 0;
String custName="";
if(request.getParameter("custId") != null && !request.getParameter("custId").equals("")){
	custId = Integer.parseInt(request.getParameter("custId")); 
}
if(request.getParameter("custName") != null && !request.getParameter("custName").equals("")){
	custName = request.getParameter("custName");
}
String startdate="";
String enddate="";
if(request.getParameter("startdate") != null && !request.getParameter("startdate").equals("") && request.getParameter("enddate") != null && !request.getParameter("enddate").equals("")){
	startdate = request.getParameter("startdate");
	enddate = request.getParameter("enddate");
}
String reloadPrevRec = "";
if(request.getParameter("reloadPrevRec") != null && !request.getParameter("reloadPrevRec").equals("")){
	reloadPrevRec = request.getParameter("reloadPrevRec"); 
}
String loadForDashboardDetails="";
if(request.getParameter("loadForDashboardDetails") != null && !request.getParameter("loadForDashboardDetails").equals("")){
	loadForDashboardDetails = request.getParameter("loadForDashboardDetails"); 
}
String type = "";
if(request.getParameter("type") != null && !request.getParameter("type").equals("")){
	type = request.getParameter("type");
}
%>

<!DOCTYPE HTML>
<html>
  <head>
    <base href="<%=basePath%>">
    
    <title>MonthlyReturnsFormOnePartTwo</title>
    
	<meta http-equiv="pragma" content="no-cache">
	<meta http-equiv="cache-control" content="no-cache">
	<meta http-equiv="expires" content="0">    
	<meta http-equiv="keywords" content="keyword1,keyword2,keyword3">
	<meta http-equiv="description" content="This is my page">
	

  </head>
  
  <body>
  	<%if (loginInfo.getStyleSheetOverride().equals("Y")){%>
	<jsp:include page="../Common/ImportJSSandMining.jsp"/>
	<%}else{%>
	<jsp:include page="../Common/ImportJS.jsp" />
   	<%}%>
   	<jsp:include page="../Common/ExportJS.jsp" />
    <script>
    var editedRowsOfOreProductionGrid="";
    var editedRowsOfGradeWiseProductionGrid="";
    var editedRowsOfDetailsOfDeductionsGrid="";
    var editedRowsOfSalesDespatchGrid="";
    var newRowAdded = 0;
    var typesOfOre = '<%=typeOfOre%>';
    var autoGeneratedKeys = '<%=autoGeneratedKeys%>';
    var custId = '<%=custId%>';
    var custName = '<%=custName%>';
    var loadForDashboardDetails = '<%=loadForDashboardDetails%>';
    var loadMask = new Ext.LoadMask(Ext.getBody(), { msg: "Saving" });
    var type = '<%=type%>';
    
   	var oreProductionCombostore = new Ext.data.SimpleStore({
      id: 'oreProductionCombostoreId',
      fields: ['Name', 'Value'],
      autoLoad: true,
      data: [
          ['Hematite', 'Hematite'],
          ['Magnetite', 'Magnetite']
      ]
    });
    var typesOfOreStore = new Ext.data.JsonStore({
	    url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getTypesOfOreStore',
	    id: 'typesOfOreStoreRootId',
	    root: 'typesOfOreStoreRoot',
	    autoLoad: true,
	    remoteSort: true,
	    fields: ['typesOfOreIndex']
	});
    var oreProductionCombo = new Ext.form.ComboBox({
	    store: oreProductionCombostore,
	    id: 'oreProductionId',
	    mode: 'local',
	    forceSelection: true,
	    emptyText: 'select Ore Product',
	    blankText: 'select Ore Product',
	    selectOnFocus: true,
	    allowBlank: false,
	    anyMatch: true,
	    typeAhead: false,
	    triggerAction: 'all',
	    lazyRender: true,
	    valueField: 'Name',
	    displayField: 'Value',
	    cls: 'selectstylePerfect',
	    listeners: {
	        select: {
	            fn: function () {
	            }
	        }
	    }
	});
	var gradeComboStore = new Ext.data.JsonStore({
	    url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getGrades',
	    id: 'gradeStoreId',
	    root: 'gradeRoot',
	    autoLoad: true,
	    remoteSort: true,
	    fields: ['gradesIndex', 'gradesIndex'],
	    listeners: {
		    }
	});
    var gradeCombo = new Ext.form.ComboBox({
	    store: gradeComboStore,
	    id: 'gradeId',
	    mode: 'local',
	    forceSelection: true,
	    emptyText: 'select Grade',
	    blankText: 'select Grade',
	    selectOnFocus: true,
	    allowBlank: false,
	    anyMatch: true,
	    typeAhead: false,
	    triggerAction: 'all',
	    lazyRender: true,
	    valueField: 'gradesIndex',
	    displayField: 'gradesIndex',
	    width:200,
	    listeners: {
	        select: {
	            fn: function () {
	            			                 
	            }
	        }
	    }
	});
		var countryComboStore = new Ext.data.JsonStore({
	    url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getCountry',
	    id: 'countryStoreId',
	    root: 'countryRoot',
	    autoLoad: true,
	    remoteSort: true,
	    fields: ['countryIndex', 'countryIndex'],
	    listeners: {
		    }
	});
    var countryCombo = new Ext.form.ComboBox({
	    store: countryComboStore,
	    id: 'countryId',
	    mode: 'local',
	    forceSelection: true,
	    emptyText: 'select Grade',
	    blankText: 'select Grade',
	    selectOnFocus: true,
	    allowBlank: false,
	    anyMatch: true,
	    typeAhead: false,
	    triggerAction: 'all',
	    lazyRender: true,
	    valueField: 'countryIndex',
	    displayField: 'countryIndex',
	    width:200,
	    //cls: 'selectstylePerfect',
	    listeners: {
	        select: {
	            fn: function () {
	            			                 
	            }
	        }
	    }
	});
	
 	var oreProductionComboPanel=new Ext.Panel({
		standardSubmit: true,
	    id: 'oreProductionPanelId',
	    layout: 'table',
	    frame: false,
	    width: screen.width - 60,
	    height: 50,
	    layout: 'table',
	    layoutConfig: {
	        columns: 3
	    },
	    items: [{
	            xtype: 'label',
	            text: '',
	            cls: 'labelstyle',
	            height:5,
	            id:'wxyz'
	        	},{
	            xtype: 'label',
	            text: '',
	            cls: 'labelstyle',
	            height:5,
	            id:'pqrs'
	        	},{
	            xtype: 'label',
	            text: '',
	            cls: 'labelstyle',
	            height:5,
	            id:'abcd'
	        	},{
	            xtype:'label',
				text:'*',
				cls:'mandatoryfield',
				id:'mandatoryoretype'
	        	},{
	            xtype: 'label',
	            text: 'Types of Ore Product :',
	            cls: 'labelstyle',
	            id:'typesOfOreProductId'
	        	},oreProductionCombo]
	});	
	var oreProductionReader = new Ext.data.JsonReader({
	      idProperty: 'productionRootId',
	      root: 'OreProductionRoot',
	      totalProperty: 'total',
	      fields: [{	          		
	          		name: 'SLNOIndex'
	      		 },{
	      		 	name: 'autoIncIdIndex'
	      		 },{
	          		name: 'categoryIndex'
	      		 },{
	          		name: 'openStockIndex'
	      		 },{
	          		name: 'productionIndex'
	      		 },{
	          		name: 'closingStockIndex'
	      		 }]
	    });
    var oreProductioFilters = new Ext.ux.grid.GridFilters({
        local: true,
        filters: [{
			        type: 'int',
			        dataIndex: 'SLNOIndex'
			    },{
		            type: 'int',
		            dataIndex: 'autoIncIdIndex'		            
        		 },{
		            type: 'string',
		            dataIndex: 'categoryIndex',		            
        		 },{
		            type: 'numeric',
		            dataIndex: 'openStockIndex',		            
        		 },{
		            type: 'numeric',
		            dataIndex: 'productionIndex',		            
        		 },{
	          		type: 'numeric',
	          		dataIndex: 'closingStockIndex'
	      		 }]
    });
    var oreProductionColModel = new Ext.grid.ColumnModel({
	    columns: [
	     	new Ext.grid.RowNumberer({
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            width : 50
	        }),{
	            header: "<span style=font-weight:bold;>SLNO</span>",
	            width: 30,
	            hidden: true,	            
				dataIndex: 'SLNOIndex'
	        },{
		        header: "<span style=font-weight:bold;>Auto Inc ID</span>",
		        sortable: true,
		        hidden: true,	 
		        dataIndex: 'autoIncIdIndex'
		    },{
		        header: "<span style=font-weight:bold;>Category</span>",
		        sortable: true,
		        width:300,
		        dataIndex: 'categoryIndex'
		    },{
		        header: "<span style=font-weight:bold;>Opening Stock</span>",
		        sortable: true,
		        width:300,
		        dataIndex: 'openStockIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({allowNegative: false,decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Production</span>",
		        sortable: false,
		        width:300,
		        dataIndex: 'productionIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({allowNegative: false,decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Closing Stock</span>",
		        sortable: false,
		        width:300,
		        dataIndex: 'closingStockIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({allowNegative: false,decimalPrecision:2}))
		    }]
	   });
	   var oreProductionStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getOreProductionList',
	            method: 'POST'
	        }),
	        reader: oreProductionReader
	    });
	    var selModelOreProduction=new Ext.grid.RowSelectionModel({
	      singleSelect:true
		});
		var oreProductionGrid = new Ext.grid.EditorGridPanel({ 
			title:'Production and Stock of ROM Ore at mine-head',
			height: 200,
	        width:screen.width-60,
	        autoScroll:true,
	        border: false,
	        store: oreProductionStore,
	        id:'oreProductionGridId',
	        colModel: oreProductionColModel,
	        sm		: selModelOreProduction,	        
	        plugins: [oreProductioFilters],
	        clicksToEdit: 1,
    	});	
    	oreProductionGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRowsOfOreProductionGrid.split(",");
            var isIn=0;
			for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRowsOfOreProductionGrid = editedRowsOfOreProductionGrid+slno+",";
			}
    	 }
    	});  
       var gradeWiseProductionReader = new Ext.data.JsonReader({
	      idProperty: 'gradeWiseProductionRootId',
	      root: 'gradeWiseProductionRoot',
	      totalProperty: 'total',
	      fields: [{	          		
	          		name: 'SLNOIndex'
	      		 },{
	      		 	name: 'autoIncIdIndex'
	      		 },{
	          		name: 'gradesIndex'
	      		 },{
	          		name: 'openingStockIndex'
	      		 },{
	          		name: 'productIndex'
	      		 },{
	          		name: 'despatchIndex'
	      		 },{
	          		name: 'closeStockIndex'
	      		 },{
	          		name: 'PMVIndex'
	      		 }]
	    });
	    var gradeWiseProductionFilters = new Ext.ux.grid.GridFilters({
	        local: true,
	        filters: [{
				        type: 'int',
				        dataIndex: 'SLNOIndex'
				      },{
			            type: 'int',
			            dataIndex: 'autoIncIdIndex'		            
	        		 },{
			            type: 'string',
			            dataIndex: 'gradesIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'openingStockIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'productIndex',		            
	        		 },{
		          		type: 'int',
		          		dataIndex: 'despatchIndex'
		      		 },{
		          		type: 'int',
		          		dataIndex: 'closeStockIndex'
		          	 },{
		          		type: 'int',
		          		dataIndex: 'PMVIndex'
		          	 }]
	    });
    var gradeWiseProductionColModel = new Ext.grid.ColumnModel({
	    columns: [
	     	new Ext.grid.RowNumberer({
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            width : 50
	        }),{
	        	header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            hidden:true,
	            width : 50
	        },{
		        header: "<span style=font-weight:bold;>Auto Inc ID</span>",
		        sortable: true,
		        hidden: true,	 
		        dataIndex: 'autoIncIdIndex'
		    },{
		        header: "<span style=font-weight:bold;>Grades(% Menerals Content)</span>",
		        sortable: true,
		        dataIndex: 'gradesIndex',
		        width:200
		    },{
		        header: "<span style=font-weight:bold;>Opening Stock</span>",
		        sortable: true,
		        dataIndex: 'openingStockIndex',
		        width:200,
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({allowNegative: false,decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Production</span>",
		        sortable: false,
		        dataIndex: 'productIndex',
		        width:200,
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({allowNegative: false,decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Despatch</span>",
		        sortable: false,
		        dataIndex: 'despatchIndex',
		        width:200,
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({allowNegative: false,decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Closing Stock</span>",
		        sortable: false,
		        dataIndex: 'closeStockIndex',
		        width:200
				
		    },{
		        header: "<span style=font-weight:bold;>Ex-mine price(RS/MT)</span>",
		        sortable: false,
		        dataIndex: 'PMVIndex',
		        width:200,
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({allowNegative: false,decimalPrecision:2}))
		    }]
	    });
		var gradeWiseProductionStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getGradeWiseProductionDespatchList',
	            method: 'POST'
	        }),
	        reader: gradeWiseProductionReader
	    });
	    var selModelGradeWise=new Ext.grid.RowSelectionModel({
	      singleSelect:true
		});
		var gradeWiseProductionGrid = new Ext.grid.EditorGridPanel({ 
			title:'Grade-Wise Production, Despatches, Stocks and Ex-mine Price Of Processed Ore',
			height: 500,
	        width:screen.width-60,
	        autoScroll:true,
	        border: false,
	        store: gradeWiseProductionStore,
	        id:'gradeWiseProductionGridId',
	        cm: gradeWiseProductionColModel,
	        sm: selModelGradeWise,	        
	        plugins: gradeWiseProductionFilters,
	        clicksToEdit: 1
    	});	
    	gradeWiseProductionGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRowsOfGradeWiseProductionGrid.split(",");
            var isIn=0;
			for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRowsOfGradeWiseProductionGrid = editedRowsOfGradeWiseProductionGrid+slno+",";
			}
			if(field == 'openingStockIndex' || field == 'productIndex' || field == 'despatchIndex'){
                finalclosingStock(e);
            }
    	 }
    	});    
    	function finalclosingStock(e) {
            
            gradeWiseProductionGrid.store.each(function(record){
            	if((parseFloat(e.record.data['openingStockIndex']) + parseFloat(e.record.data['productIndex'])) >= parseFloat(e.record.data['despatchIndex'])){
                 e.record.set('closeStockIndex',(parseFloat(e.record.data['openingStockIndex']) + parseFloat(e.record.data['productIndex'])) - parseFloat(e.record.data['despatchIndex']));        
            	}else if(e.record.data['openingStockIndex']!='' && e.record.data['productIndex']!='' && e.record.data['despatchIndex'])
            	{
            	e.record.set('closeStockIndex','');
            	e.record.set('despatchIndex','');
            	Ext.example.msg("Despatch Quantity should less than sum of Production and Opening Stock");
            	 Ext.getCmp('despatchIndex').focus();
            	}
            });
        } 
    	 
		var detailsOfDeductionsReader = new Ext.data.JsonReader({
	      idProperty: 'detailsOfDeductionsRootId',
	      root: 'detailsOfDeductionsRoot',
	      totalProperty: 'total',
	      fields: [{	          		
	          		name: 'SLNOIndex'
	      		 },{
	      		 	name: 'autoIncIdIndex'
	      		 },{
	          		name: 'DeductionClaimedIndex'
	      		 },{
	          		name: 'matricsTonesIndex'
	      		 },{
	          		name: 'remarksIndex'
	      		 }]
	    });
	    var detailsOfDeductionsFilters = new Ext.ux.grid.GridFilters({
	        local: true,
	        filters: [{
				        type: 'int',
				        dataIndex: 'SLNOIndex'
				    },{
			            type: 'int',
			            dataIndex: 'autoIncIdIndex'		            
        		 	},{
			            type: 'string',
			            dataIndex: 'DeductionClaimedIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'matricsTonesIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'remarksIndex',		            
	        		 }]
	    });
    var detailsOfDeductionsColModel = new Ext.grid.ColumnModel({
	    columns: [
	     	new Ext.grid.RowNumberer({
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            width : 50
	        }),{
	            header: "<span style=font-weight:bold;>SLNO</span>",
	            width: 30,
	            hidden: true,            
				dataIndex: 'SLNOIndex'
	        },{
		        header: "<span style=font-weight:bold;>Auto Inc ID</span>",
		        sortable: true,
		        hidden: true,	 
		        dataIndex: 'autoIncIdIndex'
		    },{
		        header: "<span style=font-weight:bold;>Deduction Claimed</span>",
		        sortable: true,
		        dataIndex: 'DeductionClaimedIndex',
		        width:400 
		    },{
		        header: "<span style=font-weight:bold;>Unit(In Rs/Tones)</span>",
		        sortable: true,
		        dataIndex: 'matricsTonesIndex',
		         width:400,
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Remarks</span>",
		        sortable: false,
		        dataIndex: 'remarksIndex',
		         width:400,
				editor: new Ext.grid.GridEditor(new Ext.form.TextField({  }))
		    }]
	    });
		var detailsOfDeductionsStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getDetailsOfDeductionsList',
	            method: 'POST'
	        }),
	        reader: detailsOfDeductionsReader
	    });
	    var detailsOfDeductionsPlant = Ext.data.Record.create([
              	{name: 'SLNOIndex'},
              	{name: 'DeductionClaimedIndex'},
              	{name: 'matricsTonesIndex'},
              	{name: 'remarksIndex'} 	
        ]);
        var selModDeletailsOfDeduction=new Ext.grid.RowSelectionModel({
	      singleSelect:true
		});       
		var detailsOfDeductionsGrid = new Ext.grid.EditorGridPanel({ 
			title:'Details Of Deduction Used For Computation Of Sales Price',
			height: 330,
	        width:screen.width-60,
	        autoScroll:true,
	        border: false,
	        store: detailsOfDeductionsStore,
	        id:'detailsOfDeductionsGridId',
	        cm: detailsOfDeductionsColModel,
	        sm: selModDeletailsOfDeduction,	        
	        plugins: detailsOfDeductionsFilters,
	        clicksToEdit: 1,
    	});
    	detailsOfDeductionsGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRowsOfDetailsOfDeductionsGrid.split(",");
            var isIn=0;
			for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRowsOfDetailsOfDeductionsGrid = editedRowsOfDetailsOfDeductionsGrid+slno+",";
			}
			if(field='matricsTonesIndex'){
            	gettotal(field);
            }
    	 }
    	}); 
    	
    	function gettotal(e)
	    {
	    var femalelabtotal = 0;
	    	detailsOfDeductionsGrid.store.each(function(record1)
		    	{
		      		if(record1.data['DeductionClaimedIndex']!='Total (a) to (g)' && record1.data[e]!=''){
						femalelabtotal = (parseFloat(parseFloat(femalelabtotal))+parseFloat(record1.data[e]));
					}			
		    	})
				detailsOfDeductionsGrid.store.each(function(record1)
		    	{
		      		if(record1.data['DeductionClaimedIndex']=='Total (a) to (g)'){
						record1.set(e, femalelabtotal);
					}			
		    	})
	    }
    
    	var salesDespatchReader = new Ext.data.JsonReader({
	      idProperty: 'salesDespatchRootId',
	      root: 'salesDespatchRoot',
	      totalProperty: 'total',
	      fields: [{	          		
	          		name: 'SLNOIndex'
	      		 },{
	      		 	name: 'autoIncIdIndex'
	      		 },{
	          		name: 'gradeIndex'
	      		 },{
	          		name: 'despatchIndex'
	      		 },{
	          		name: 'domConsumptConsigneeNameIndex'
	      		 },{
	          		name: 'domConsumptQuantityIndex'
	      		 },{
	          		name: 'domConsumptSalesValueIndex'
	      		 },{
	          		name: 'exportCountryIndex'
	      		 },{
	          		name: 'exportQualityIndex'
	      		 },{
	          		name: 'exportFOBIndex'
	      		 }]
	    });
	    var salesDespatchFilters = new Ext.ux.grid.GridFilters({
	        local: true,
	        filters: [{
				        type: 'int',
				        dataIndex: 'SLNOIndex'
				    },{
			            type: 'int',
			            dataIndex: 'autoIncIdIndex'		            
        		 	},{
			            type: 'string',
			            dataIndex: 'gradeIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'despatchIndex',		            
	        		 },{
			            type: 'string',
			            dataIndex: 'domConsumptConsigneeNameIndex',		            
	        		 },{
			            type: 'numeric',
			            dataIndex: 'domConsumptQuantityIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'domConsumptSalesValueIndex',		            
	        		 },{
			            type: 'string',
			            dataIndex: 'exportCountryIndex',		            
	        		 },{
			            type: 'numeric',
			            dataIndex: 'exportQualityIndex',		            
	        		 },{
			            type: 'numeric',
			            dataIndex: 'exportFOBIndex',		            
	        		 }]
	    });
    var salesDespatchColModel = new Ext.grid.ColumnModel({
	    columns: [
	     	new Ext.grid.RowNumberer({
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            width : 50
	        }),{
	            header: "<span style=font-weight:bold;>SLNO</span>",
	            width: 30,
	            hidden: true,            
				dataIndex: 'SLNOIndex'
	        },{
		        header: "<span style=font-weight:bold;>Auto Inc ID</span>",
		        sortable: true,
		        hidden: true,	 
		        dataIndex: 'autoIncIdIndex'
		    },{
		        header: "<span style=font-weight:bold;>Grade</span>",
		        sortable: true,
		        dataIndex: 'gradeIndex',
		        width:200,
				editor: new Ext.grid.GridEditor(gradeCombo)
		    },{
		        header: "<span style=font-weight:bold;>Nature Of Despatch(Indicate Whether sales or captive consumption or export)</span>",
		        sortable: true,
		        dataIndex: 'despatchIndex',
		        width:150,
				editor: new Ext.grid.GridEditor(new Ext.form.TextField({  }))
		    },{
		        header: "<span style=font-weight:bold;>Domestics Consumption(Consignee name and Registration No. as alloted  by the Indian Bureau of Mines to the buyers)</span>",
		        sortable: false,
		        dataIndex: 'domConsumptConsigneeNameIndex',
		        width:150,
				editor: new Ext.grid.GridEditor(new Ext.form.TextField({  }))
		    },{
		        header: "<span style=font-weight:bold;>Domestics Consumption(Quantity)</span>",
		        sortable: false,
		        dataIndex: 'domConsumptQuantityIndex',
		         width:150,
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Domestics Consumption(Sales Value)</span>",
		        sortable: true,
		        dataIndex: 'domConsumptSalesValueIndex',
		         width:150,
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>For Export(Country)</span>",
		        sortable: true,
		        dataIndex: 'exportCountryIndex',
		         width:150,
				editor: new Ext.grid.GridEditor(countryCombo)
		    },{
		        header: "<span style=font-weight:bold;>For Export(Quantity)</span>",
		        sortable: true,
		        dataIndex: 'exportQualityIndex',
		         width:150,
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>For Export(F.O.B)</span>",
		        sortable: true,
		        dataIndex: 'exportFOBIndex',
		         width:150,
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    }]
	    });
		var salesDespatchStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getSalesDespatchList',
	            method: 'POST'
	        }),
	        reader: salesDespatchReader
	    });
	    var salesDespatchPlant = Ext.data.Record.create([
              	{name:'SLNOIndex'},
              	{name: 'autoIncIdIndex'},
	      		{name:'gradeIndex'},
	      		{name:'despatchIndex'},
	      		{name:'domConsumptConsigneeNameIndex'},
	      		{name:'domConsumptQuantityIndex'},
	      		{name:'domConsumptSalesValueIndex'},
	      		{name:'exportCountryIndex'},
	      		{name:'exportQualityIndex'},
	      		{name:'exportFOBIndex'}	
        ]);
       var selModelSalesDespatch=new Ext.grid.RowSelectionModel({
	      singleSelect:true
		});         
		var salesDespatchGrid = new Ext.grid.EditorGridPanel({ 
			title:'Sales/Despatches effect for Domestic Consumption and For Exports',
			height: 400,
	        width:screen.width-60,
	        autoScroll:true,
	        border: false,
	        store: salesDespatchStore,
	        id:'salesDespatchGridId',
	        cm: salesDespatchColModel,
	        sm: selModelSalesDespatch,	        
	        plugins: salesDespatchFilters,
	        clicksToEdit: 1,
			tbar: [{
            text: 'Add',
            handler : function(){ 
            	var Plant = salesDespatchGrid.getStore().recordType;
            	newRowAdded++;
            	if(newRowAdded<21){
	                var p = new salesDespatchPlant({
	                   	SLNOIndex:newRowAdded,
	                   	autoIncIdIndex:'',
			      		gradeIndex:'',
			      		despatchIndex:'',
			      		domConsumptConsigneeNameIndex:'',
			      		domConsumptQuantityIndex:'',
			      		domConsumptSalesValueIndex:'',
			      		exportCountryIndex:'',
			      		exportQualityIndex:'',
			      		exportFOBIndex:''
	                });               
	                salesDespatchGrid.stopEditing();
	                salesDespatchStore.insert(0, p);
	                salesDespatchGrid.startEditing(0, 0);
                 }
             }
		}]
    });
    salesDespatchGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRowsOfSalesDespatchGrid.split(",");
            var isIn=0;
			for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRowsOfSalesDespatchGrid = editedRowsOfSalesDespatchGrid+slno+",";
			}
    	 }
    });
	var innerPanelForFormTwo = new Ext.Panel({
	       standardSubmit: true,
	       collapsible: false,
	       autoScroll: true,
	       width: screen.width-26,
	       height:395,
	       id: 'innerPanelForFormTwoId',
	       layout: 'table',
	       layoutConfig: {
	           columns: 1
	       },
	       items: [oreProductionComboPanel,oreProductionGrid,gradeWiseProductionGrid,detailsOfDeductionsGrid,salesDespatchGrid]
   });
	var buttonPanel=new Ext.FormPanel({
       	id: 'buttonid',
       	cls:'colorid',
       	frame:true,
           buttons:[{
              		text: 'Back',
              		cls:'colorid',
              		iconCls:'backbutton',
              		hidden:false,
              		handler : function(){ 
              		    var reloadPrevRec = "reloadPrevRec";
						var MonthlyReturnsFormOnePartOne='/Telematics4uApp/Jsps/IronMining/MonthlyReturnsFormOnePartOne.jsp?reloadPrevRec='+reloadPrevRec+'&autoGeneratedKeys='+autoGeneratedKeys+'&custId='+custId+'&custName='+custName+'&typeOfOre='+typesOfOre+'&startdate='+'<%=startdate%>'+'&enddate='+'<%=enddate%>'+'&loadForDashboardDetails='+loadForDashboardDetails+'&type='+type;
	              		parent.Ext.getCmp('partTwoTab').disable();
	              		parent.Ext.getCmp('partOneTab').enable();
	              		parent.Ext.getCmp('partOneTab').show();
						parent.Ext.getCmp('partOneTab').update("<iframe style='width:100%;height:525px;border:0;' src='"+MonthlyReturnsFormOnePartOne+"'></iframe>");
						}
              		},{
              		text: 'Save & Continue',
              		cls:'colorid',
              		iconCls:'savebutton',
              		handler : function(){ 
              		if(typesOfOre == 'Iron Ore'){
	              		if(Ext.getCmp('oreProductionId').getValue() == ""){
		            		Ext.example.msg("Enter Types Of Ore Product");
			                Ext.getCmp('oreProductionId').focus();
			                return;
		            	} 
	            	} 
	            	Ext.MessageBox.confirm('Confirm', 'Are you sure you want to save?',showResult);
              		}
              }]
	 });
	 function showResult(btn){
	 	if(btn == 'yes'){
	 	var oreProductionJSON = '';
		var gradeWiseProductionJSON = '';
		var detailsOfDeductionsJSON = '';
		var SalesDespatchJSON = '';					 
		var oreProductionTemp=editedRowsOfOreProductionGrid.split(",");
	    var gradeWiseProductionTemp = editedRowsOfGradeWiseProductionGrid.split(",");
	    var detailsOfDeductionsTemp = editedRowsOfDetailsOfDeductionsGrid.split(",");
	    var salesDespatchTemp = editedRowsOfSalesDespatchGrid.split(",");
	    var valid = true;
		isIn=0;
		/*******************************Ore Production********************************************/
		for(var i=0;i<oreProductionTemp.length;i++){
			var row1 = oreProductionGrid.store.find('SLNOIndex',oreProductionTemp[i]);
			if(row1==-1){
			continue;
		}
		var store1 = oreProductionGrid.store.getAt(row1);
		oreProductionJSON += Ext.util.JSON.encode(store1.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(oreProductionJSON!=''){
			oreProductionJSON = oreProductionJSON.substring(0, oreProductionJSON.length - 1);
			
		}
		/*******************************GRADE WISE********************************************/					
		for(var i=0;i<gradeWiseProductionTemp.length;i++){
			var row2 = gradeWiseProductionGrid.store.find('SLNOIndex',gradeWiseProductionTemp[i]);
			if(row2==-1){
			continue;
		}
		var store2 =gradeWiseProductionGrid.store.getAt(row2);
		gradeWiseProductionJSON += Ext.util.JSON.encode(store2.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(gradeWiseProductionJSON!=''){
			gradeWiseProductionJSON = gradeWiseProductionJSON.substring(0, gradeWiseProductionJSON.length - 1);
		}
		/*******************************Deduction Details********************************************/
		for(var i=0;i<detailsOfDeductionsTemp.length;i++){
			var row3 = detailsOfDeductionsGrid.store.find('SLNOIndex',detailsOfDeductionsTemp[i]);
			if(row3==-1){
			continue;
		}
		var store3 =detailsOfDeductionsGrid.store.getAt(row3);
		detailsOfDeductionsJSON += Ext.util.JSON.encode(store3.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(detailsOfDeductionsJSON!=''){
			detailsOfDeductionsJSON = detailsOfDeductionsJSON.substring(0, detailsOfDeductionsJSON.length - 1);
		}
		/*******************************Sales & Despatch********************************************/
		for(var i=0;i<salesDespatchTemp.length;i++){
			var row4 = salesDespatchGrid.store.find('SLNOIndex',salesDespatchTemp[i]);
			if(row4==-1){
			continue;
		}
		var store4 =salesDespatchGrid.store.getAt(row4);
		SalesDespatchJSON += Ext.util.JSON.encode(store4.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(SalesDespatchJSON!=''){
			SalesDespatchJSON = SalesDespatchJSON.substring(0, SalesDespatchJSON.length - 1);
		}
		loadMask.show();
		Ext.Ajax.request({
             url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=insertFormOnePartTwo',
             method: 'POST',
             params: {
            		autoGeneratedId:autoGeneratedKeys,
            		oreType:Ext.getCmp('oreProductionId').getValue(),
            		JSONOreProductionData:oreProductionJSON,
            		JSONGradeWiseProductionData:gradeWiseProductionJSON,
            		JSONDetailsOfDeductionData:detailsOfDeductionsJSON,
            		JSONSaleDespatchData:SalesDespatchJSON								                           	                       
             },
             success: function (response, options) {
                	loadMask.hide();
                    var message = response.responseText;
                    var MonthlyReturnsFormOnePartFour='/Telematics4uApp/Jsps/IronMining/MonthlyReturnsFormOnePartFour.jsp?autoGeneratedKeys='+autoGeneratedKeys+'&custId='+custId+'&custName='+custName+'&typeOfOre='+typesOfOre+'&startdate='+'<%=startdate%>'+'&enddate='+'<%=enddate%>'+'&reloadPrevRec='+'<%=reloadPrevRec%>'+'&loadForDashboardDetails='+loadForDashboardDetails+'&type='+type;
       		  		parent.Ext.getCmp('partFourTab').enable();
					parent.Ext.getCmp('partTwoTab').disable();
					parent.Ext.getCmp('partFourTab').show();
					parent.Ext.getCmp('partFourTab').update("<iframe style='width:100%;height:525px;border:0;' src='"+MonthlyReturnsFormOnePartFour+"'></iframe>");
                    },
             failure: function (response, options) {
                 loadMask.hide();
                 Ext.example.msg("Error");		                                
             }
          });
        }
	 }
	 Ext.onReady(function () {
		    Ext.QuickTips.init();
		    Ext.form.Field.prototype.msgTarget = 'side';
		    outerPanel = new Ext.Panel({
		        title: 'Authorise Monthly Returns',		        
		        standardSubmit: true,
		        frame: false,
		        width: screen.width-22,
		        height:520,
		        renderTo: 'content',
		        cls: 'outerpanel',
		        layout: 'table',
		        layoutConfig: {
		            columns: 1
		        },
		        items: [innerPanelForFormTwo,buttonPanel]
		    });
		    
		    if(typesOfOre == 'Iron Ore'){
		    	oreProductionComboPanel.show();
		    	typesOfOreStore.load({
		    		params:{autoGeneratedId:autoGeneratedKeys},
		    		callback:function(){
		    				if(typesOfOreStore.getCount() > 0){
		    					var record = typesOfOreStore.getAt(0);
		    					var oretype = record.data['typesOfOreIndex'];
		    					Ext.getCmp('oreProductionId').setValue(oretype);
		    				}
		    			}
		    		});
		    }else{
		    	oreProductionComboPanel.hide();
		    }
		    oreProductionStore.load({params:{typeOfOre:'<%=typeOfOre%>',autoGeneratedId:autoGeneratedKeys,custId:custId}});
			detailsOfDeductionsStore.load({params:{autoGeneratedId:autoGeneratedKeys}});
			gradeWiseProductionStore.load({params:{typeOfOre:'<%=typeOfOre%>',autoGeneratedId:autoGeneratedKeys}});
            gradeComboStore.load({params:{typeOfOre:'<%=typeOfOre%>'}});
            salesDespatchStore.load({params:{autoGeneratedId:autoGeneratedKeys}});
            countryComboStore.load();
		});
	
    </script>
  </body>
</html>
