<%@ page language="java" import="java.util.*,java.text.SimpleDateFormat,t4u.functions.*,t4u.beans.*,t4u.common.*" pageEncoding="utf-8"%>
<%@ taglib uri="http://packtag.sf.net" prefix="pack" %>
<%
String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
if(request.getParameter("list")!=null){
	String list=request.getParameter("list").toString().trim();
	String[] str=list.split(",");
	int systemid=Integer.parseInt(str[0].trim());
	int customerid=Integer.parseInt(str[1].trim());
	int userid=Integer.parseInt(str[2].trim());
	String language=str[3].trim();
	LoginInfoBean loginInfo=new LoginInfoBean();
	loginInfo.setSystemId(systemid);
	loginInfo.setCustomerId(customerid);
	loginInfo.setUserId(userid);
	loginInfo.setLanguage(language);
	loginInfo.setZone(str[4].trim());
	loginInfo.setOffsetMinutes(Integer.parseInt(str[5].trim()));
	loginInfo.setSystemName(str[6].trim());
	loginInfo.setCategory(str[7].trim());
	loginInfo.setStyleSheetOverride("N");
	if(str.length>8){
		loginInfo.setCustomerName(str[8].trim());
	}
	if(str.length>9){
		loginInfo.setCategoryType(str[9].trim());
	}
	if(str.length>10){
		loginInfo.setUserName(str[10].trim());
	}
	session.setAttribute("loginInfoDetails",loginInfo);	
}	
CommonFunctions cf = new CommonFunctions();
cf.checkLoginInfo((LoginInfoBean) session.getAttribute("loginInfoDetails"), session, request, response);
String responseaftersubmit="''";
if(session.getAttribute("responseaftersubmit")!=null){
   	responseaftersubmit="'"+session.getAttribute("responseaftersubmit").toString()+"'";
	session.setAttribute("responseaftersubmit",null);
}		
LoginInfoBean loginInfo = (LoginInfoBean) session.getAttribute("loginInfoDetails");
String language = loginInfo.getLanguage();
int systemId = loginInfo.getSystemId();
int customerId = loginInfo.getCustomerId();
int custId = 0;
String custName="";
if(request.getParameter("custId") != null && !request.getParameter("custId").equals("")){
	custId = Integer.parseInt(request.getParameter("custId")); 
}
if(request.getParameter("custName") != null && !request.getParameter("custName").equals("")){
	custName = request.getParameter("custName");
}
String startdate="";
String enddate="";
if(request.getParameter("startdate") != null && !request.getParameter("startdate").equals("") && request.getParameter("enddate") != null && !request.getParameter("enddate").equals("")){
	startdate = request.getParameter("startdate");
	enddate = request.getParameter("enddate");
}
String reloadPrevRec = "";
String autoGeneratedKeys = "";
String loadForDashboardDetails="";
if(request.getParameter("reloadPrevRec") != null && !request.getParameter("reloadPrevRec").equals("")){
	reloadPrevRec = request.getParameter("reloadPrevRec"); 
}
if(request.getParameter("loadForDashboardDetails") != null && !request.getParameter("loadForDashboardDetails").equals("")){
	loadForDashboardDetails = request.getParameter("loadForDashboardDetails"); 
}
if(request.getParameter("autoGeneratedKeys") != null && !request.getParameter("autoGeneratedKeys").equals("")){
	autoGeneratedKeys = request.getParameter("autoGeneratedKeys"); 
}
String typeOfOre = "";
if(request.getParameter("typeOfOre") != null && !request.getParameter("typeOfOre").equals("")){
	typeOfOre = request.getParameter("typeOfOre"); 
}
String type = "";
if(request.getParameter("type") != null && !request.getParameter("type").equals("")){
	type = request.getParameter("type");
}
%>

<!DOCTYPE HTML>
<html>
  <head>
    <title>MonthlyReturnsFormOnePartOne</title>
    <meta http-equiv="pragma" content="no-cache">
	<meta http-equiv="cache-control" content="no-cache">
	<meta http-equiv="expires" content="0">    
	<meta http-equiv="keywords" content="keyword1,keyword2,keyword3">
	<meta http-equiv="description" content="This is my page">
	<style type="text/css">
	.fieldsetpanels {
	    margin-left: 10px;
	}
	#minedetailsid{
		height:155px;
	}
	#DetailsOfRentRoyaltyId{
		height:180px;
	}
	</style>
  </head>
  
  <body>
    <%if (loginInfo.getStyleSheetOverride().equals("Y")){%>
	<jsp:include page="../Common/ImportJSSandMining.jsp"/>
	<%}else{%>
	<jsp:include page="../Common/ImportJS.jsp" />
   	<%}%>
   	<script>
   	var dtcur = datecur;
   	var editedRows = "";
   	var newRowAdded = 0;
   	var loadMask = new Ext.LoadMask(Ext.getBody(), { msg: "Saving" });
   	var custId = '<%=custId%>';
   	var custName = '<%=custName%>';
   	var autoGeneratedKeys = '<%=autoGeneratedKeys%>';
   	var type = '<%=type%>';
   	var mineOwnerId;
   	var mineCode;
   	var loadForDashboardDetails = '<%=loadForDashboardDetails%>';
   	var typeOfOre;
   	function daysInMonth(month,year) {
    return new Date(year, month, 0).getDate();
  }
   	var mineralsComboStore = new Ext.data.SimpleStore({
	      id: 'mineralsComboStoreId',
	      fields: ['Name', 'Value'],
	      autoLoad: true,
	      data: [
	          ['Iron Ore', 'Iron Ore'],
	          ['Bauxite/Laterite', 'Bauxite/Laterite'],
			  ['Manganese', 'Manganese']
	      ]
	  });
	 var mineCodeComboStore = new Ext.data.JsonStore({
		url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getListOfTCNo',
		id: 'mineCodeStoreId',
		root: 'TCNoComboStoreRoot',
		autoLoad: false,
		fields: ['tcNoId','regIBM','minecode','tcno','nameOfMines','Village','postOffice','talukaName','districtName','stateName','PIN','FAXNo','phoneNo','emailId']
	});
	var detailsAndLocationOfMineComboStore = new Ext.data.JsonStore({
		url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getDetailsAndLocationOfMine',
		id: 'detailsAndLocationOfMineRootId',
		root: 'detailsAndLocationOfMineRoot',
		autoLoad: false,
		fields: ['dateIndex','regionIndex','registrationIndex','mineralNameIndex','mineIdIndex','mineCodeIndex','TCNOIndex','mineNameIndex',
				 'villageIndex','postOfficeIndex','talukaNameIndex','districtNameIndex','stateNameIndex','PINIndex','FAXNOIndex',
				 'phoneNoIndex','emailIdIndex','otherMineralsNameIndex','mineOwnerIdIndex','rentPaidIndex','royaltyPaidIndex',
				 'deadRentPaidIndex','mineWorkDaysIndex','mineNonWorkDaysIndex','reasonForNotWorkedIndex','otherStoppedReasonIndex','technicalStaffIndex','totalSalariesIndex']
	});
	var gradeComboStore = new Ext.data.JsonStore({
		url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getGradeForChallan',
		id: 'gradeStoreId',
		root: 'gradeStoreRoot',
		autoLoad: false,
		fields: ['gradesIndex']
	});
	var gradeCombo = new Ext.form.ComboBox({
		    store: gradeComboStore,
		    id:'gradeId',
		    mode: 'local',
		    emptyText:'Select Grade',	    			    		
		    blankText :'Select Grade',
		    forceSelection: true,		    
		    selectOnFocus: true,
		    allowBlank: false,
		    anyMatch: true,
		    typeAhead: false,
		    triggerAction: 'all',
		    lazyRender: true,
		    valueField:'gradesIndex',
    		displayField:'gradesIndex',
    		width:300,
    		listeners : {
    			select:{
    				fn:function(){
              			}
    				}
    			}
		});
	
	   	var typeComboStore = new Ext.data.SimpleStore({
	      id: 'typeComboStoreId',
	      fields: ['Name', 'Value'],
	      autoLoad: true,
	      data: [
	          ['Waste', 'Waste'],
			  ['Tailing', 'Tailing']
	      ]
	  });
	var typeCombo = new Ext.form.ComboBox({
		    store: typeComboStore,
		    id:'typeId',
		    mode: 'local',
		    emptyText:'Select Type',	    			    		
		    blankText :'Select Type',
		    forceSelection: true,		    
		    selectOnFocus: true,
		    allowBlank: false,
		    anyMatch: true,
		    typeAhead: false,
		    triggerAction: 'all',
		    lazyRender: true,
		    valueField:'Value',
    		displayField:'Name',
    		width:300,
    		listeners : {
    			select:{
    				fn:function(){
              			}
    				}
    			}
		});
	var mineCodeCombo = new Ext.form.ComboBox({
		    store: mineCodeComboStore,
		    id:'minecodeId',
		    mode: 'local',
		    emptyText:'Select Mine Code',	    			    		
		    blankText :'Select Mine Code',
		    forceSelection: true,		    
		    selectOnFocus: true,
		    allowBlank: false,
		    anyMatch: true,
		    typeAhead: false,
		    triggerAction: 'all',
		    lazyRender: true,
		    valueField:'tcNoId',
    		displayField:'minecode',
    		cls: 'selectstylePerfect',
    		listeners : {
    			select:{
    				fn:function(){
    					  mineCode = Ext.getCmp('minecodeId').getValue();
    					  var idx=mineCodeComboStore.find('tcNoId',mineCode);
               			  if(idx>=0)
               			  {
               			    var record = mineCodeComboStore.getAt(idx);
               			    if(record.data['tcNoId'] == mineCode){
               			      Ext.getCmp('regId').setValue(record.data['regIBM']);
               			  	  Ext.getCmp('minesId').setValue(record.data['nameOfMines']);
               			  	  Ext.getCmp('villageId').setValue(record.data['Village']);
							  Ext.getCmp('postOfficeId').setValue(record.data['postOffice']);
							  Ext.getCmp('tahsilId').setValue(record.data['talukaName']);
							  Ext.getCmp('districtId').setValue(record.data['districtName']);
							  Ext.getCmp('stateId').setValue(record.data['stateName']);
							  Ext.getCmp('pinId').setValue(record.data['PIN']);
							  Ext.getCmp('faxId').setValue(record.data['FAXNo']);
							  Ext.getCmp('phoneId').setValue(record.data['phoneNo']);
							  Ext.getCmp('emailId').setValue(record.data['emailId']);
							}
						 }
              			}
    				}
    			}
		});
	 var innerPanelForDetailsMining = new Ext.form.FormPanel({
		standardSubmit: true,	
		autoScroll:true,
		height:200,
		border:false,		
		id:'innerPanelForDetailsMiningId',
		layout:'table',		
		items: [{
				xtype:'fieldset', 
				title:'Details Of the Mines',
				cls:'fieldsetpanel',
				width: 630,
				collapsible: false,
				colspan:6,
				id:'minedetailsid',
				layout:'table',				
				layoutConfig: {
					columns:6,
					tableAttrs: {
						style: {width: '100%'}
					  }
				},
			items:[{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatorydt'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'datelab',
					text: 'Select Date :'
					},{
					xtype: 'datefield',
					format:getMonthYearFormat(),  	
					plugins: 'monthPickerPlugin',	        
					id: 'DateId',  		        
					value: dtcur,  		     
					vtype: 'daterange',
					cls: 'selectstylePerfect',
				    listeners : {
		    			 select:{
		    				fn:function(){
		    					Ext.getCmp('mineWorkedId').reset();
		    					Ext.getCmp('WorkStoppedId').reset();
		              			}
		    				}
	    				}
					},{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatoryregion'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'regionlab',
					text: 'Region :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Region',	    			    		
		    		blankText :'Enter Region',
		    		allowBlank: false,
		    		readOnly:true,
		    		value:'Goa',
		    		id:'regionId'	    		
		    		},{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatorypins'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'pinslab',
					text: 'PIN :'
					},{
					xtype:'numberfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter PIN',	    			    		
		    		blankText :'Enter PIN',
		    		maxLength: 6,
		    		decimalPrecision:0,
	    			autoCreate: {tag: 'input', type: 'text', size: '6', autocomplete:'off', maxlength: '6'},
		    		allowBlank: false,
		    		readOnly:true,
		    		value:'403001',
		    		id:'pinsId'	    		
		    		},{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatoryreg'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'reglab',
					text: 'IBM Reg. No :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter IBM Reg. No',	    			    		
		    		blankText :'Enter IBM Reg. No',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'regId'	    		
		    		},{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatorymineralsname'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'mineralsnamelab',
					text: 'Name Of Minerals :'
					},{
					xtype:'combo',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Name Of Minerals',	    			    		
		    		blankText :'Enter Name Of Minerals',
		    		allowBlank: false,
		    		forceSelection: true,
		    		triggerAction: 'all',
		    		anyMatch: true,
		            onTypeAhead: true,
		            selectOnFocus: true,
		    		store:mineralsComboStore,
		    		mode: 'local',
		    		valueField:'Value',
		    		displayField:'Name',
		    		id:'mineralsnameId',
		    		listeners : {
		    			select:{
		    				fn:function(){
			    				var typeOfOre=Ext.getCmp('mineralsnameId').getValue();
			                    gradeComboStore.load({params:{typeOfOre:typeOfOre}});
			                    outerPanelForChallanGrid.getSelectionModel().getSelected().set('gradeIndex',"");
		              			}
		    				}
	    				}	    		
		    		},{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatorytcNo'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'tcNolab',
					text: 'TC No :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter TC No',	    			    		
		    		blankText :'Enter TC No',
		    		allowBlank: false,
		    		readOnly:false,
		    		id:'tcNoId',
		    		listeners: {
		    			change: function (field, newValue, oldValue){
                          		field.setValue(newValue.toUpperCase().trim());
                          		}
                       	}
		    		},{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatoryminecode'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'minecodelab',
					text: 'Mine Code :'
					},mineCodeCombo,{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatoryminesname'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'minesnamelab',
					text: 'Mine Name :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Name of Mines',	    			    		
		    		blankText :'Enter Name of Mines',
		    		allowBlank: false,
		    		readOnly:true,		    		
		    		id:'minesId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryothersmine'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'othersmineslab',
					text: 'Others Minerals :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Name of Minerals',	    			    		
		    		blankText :'Enter Name of Minerals',
		    		allowBlank: false,		    		
		    		id:'othersmineId'	    		
		    		}]					
				}]
	    });
	 var innerPanelForLocationMining = new Ext.form.FormPanel({
		standardSubmit: true,	
		autoScroll:true,
		border:false,
		id:'innerPanelForLocationMiningId',
		layout:'table',		
		items:[{
				xtype:'fieldset', 
				title:'Location of the mine',
				cls:'fieldsetpanels',
				width: 620,
				collapsible: false,
				colspan:6,
				id:'minelocationId',
				layout:'table',
				layoutConfig: {
					columns:6,
					tableAttrs: {
						style: {width: '100%'}
					  }
				},
			items:[{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryvillage'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'villagelab',
					text: 'Village :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Village Name',	    			    		
		    		blankText :'Enter Village Name',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'villageId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorypostoffice'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'postOfficelab',
					text: 'Post Office :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Post Office Name',	    			    		
		    		blankText :'Enter Post Office Name',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'postOfficeId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorytahsil'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'tahsillab',
					text: 'Tahsil/Taluk :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Tahsil/Taluk Name',	    			    		
		    		blankText :'Enter Tahsil/Taluk Name',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'tahsilId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorydistrict'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'districtlab',
					text: 'District :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter District Name',	    			    		
		    		blankText :'Enter District Name',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'districtId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorystate'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'statelab',
					text: 'State :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter State Name',	    			    		
		    		blankText :'Enter State Name',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'stateId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorypin'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'pinlab',
					text: 'PIN Code :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter PIN Code',	    			    		
		    		blankText :'Enter PIN Code',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'pinId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryfax'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'faxlab',
					text: 'FAX No. :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter FAX No.',	    			    		
		    		blankText :'Enter FAX No.',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'faxId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryphone'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'phonelab',
					text: 'Phone No. :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Phone No.',	    			    		
		    		blankText :'Enter Phone No.',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'phoneId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryemail'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'emaillab',
					text: 'Email Id :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Email Id',	    			    		
		    		blankText :'Enter Email Id',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'emailId'	    		
		    		}]					
				}]
	    });
	var nameAndAddressStore = new Ext.data.JsonStore({
		url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getNameAndAddress',
		id: 'nameAndAddressStoreRoot',
		root: 'nameAndAddressStoreRoot',
		autoLoad: false,
		fields: ['ID','name','Village','postOffice','talukaName','districtName','stateName','PIN','FAXNo','phoneNo','emailId']
	});
	var nameAddressOfLesseeOwnerStore = new Ext.data.JsonStore({
		url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getNameAddressOfLesseeOwner',
		id: 'NameAddressOfLesseeOwnerRootId',
		root: 'NameAddressOfLesseeOwnerRoot',
		autoLoad: false,
		fields: ['mineOwnerIdIndex','contactPersonIndex','villageIndex','postIndex','talukaIndex','districtIndex','stateIndex','pinIndex','faxIndex','phoneIndex','emailIndex']
	});
	var nameAndAddressCombo = new Ext.form.ComboBox({
		    store: nameAndAddressStore,
		    id:'nameAndAddressComboId',
		    mode: 'local',
		    emptyText:'Select Name of Person',	    			    		
		    blankText :'Select Name of Person',
		    forceSelection: true,		    
		    selectOnFocus: true,
		    allowBlank: false,
		    anyMatch: true,
		    typeAhead: false,
		    triggerAction: 'all',
		    lazyRender: true,
		    valueField:'ID',
    		displayField:'name',
    		cls: 'selectstylePerfect',	
		    listeners: {
		        select: {
		            fn: function () {
		            		mineOwnerId = Ext.getCmp('nameAndAddressComboId').getValue();
			            	var idx = nameAndAddressStore.find('ID',mineOwnerId);
			            	if(idx>=0){
				            	var record = nameAndAddressStore.getAt(idx);
		              			if(record.data['ID'] == mineOwnerId){
		              			  Ext.getCmp('streetId').setValue(record.data['Village']);
								  Ext.getCmp('postId').setValue(record.data['postOffice']);
								  Ext.getCmp('talukId').setValue(record.data['talukaName']);
								  Ext.getCmp('distId').setValue(record.data['districtName']);
								  Ext.getCmp('statesId').setValue(record.data['stateName']);
								  Ext.getCmp('pincodeId').setValue(record.data['PIN']);
								  Ext.getCmp('faxNoId').setValue(record.data['FAXNo']);
								  Ext.getCmp('phoneNoId').setValue(record.data['phoneNo']);
								  Ext.getCmp('emailIdId').setValue(record.data['emailId']);
								}
							} 
		            	}
		        	}
		    	}
		});
	var innerPanelForNameAndAddress = new Ext.form.FormPanel({
		standardSubmit: true,	
		autoScroll:true,
		border:false,
		id:'innerPanelForNameAndAddressId',
		layout:'table',		
		items:[{
				xtype:'fieldset', 
				title:'Name and Address of Lessee/Owner',
				cls:'fieldsetpanels',
				width: 620,
				collapsible: false,
				colspan:6,
				id:'nameAndAddressId',
				layout:'table',
				layoutConfig: {
					columns:6,
					tableAttrs: {
						style: {width: '100%'}
					  }
				},
			items:[{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatorynameofperson'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'nameofpersonlab',
					text: 'Name of Person :'
					},nameAndAddressCombo,{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorystet'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'stretlab',
					text: ''
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'strlab',
					text: ''
					},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorystreet'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'streetlab',
					text: 'Street/Village :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Street/Village',    			    		
		    		blankText :'Enter Street/Village',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'streetId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorypost'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'postlab',
					text: 'Post Office :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Post Office',	    			    		
		    		blankText :'Enter Post Office',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'postId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorytaluk'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'taluklab',
					text: 'Tahsil/Taluk :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Tahsil/Taluk',	    			    		
		    		blankText :'Tahsil/Taluk',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'talukId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorydist'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'distlab',
					text: 'District :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter District Name',	    			    		
		    		blankText :'Enter District Name',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'distId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorystates'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'stateslab',
					text: 'State :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter State Name',	    			    		
		    		blankText :'Enter State Name',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'statesId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorypincode'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'pincodelab',
					text: 'PIN Code :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter PIN Code',	    			    		
		    		blankText :'Enter PIN Code',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'pincodeId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryfaxno'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'faxNolab',
					text: 'FAX No. :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter FAX No.',	    			    		
		    		blankText :'Enter FAX No.',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'faxNoId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryphoneno'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'phoneNolab',
					text: 'Phone No. :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Phone No.',	    			    		
		    		blankText :'Enter Phone No.',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'phoneNoId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryemailid'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'emailIdlab',
					text: 'Email Id :'
					},{
					xtype:'textfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Email Id',	    			    		
		    		blankText :'Enter Email Id',
		    		allowBlank: false,
		    		readOnly:true,
		    		id:'emailIdId'	    		
		    		}]					
				}]
	    });	
	 var innerPanelForDetailsOfRentRoyalty = new Ext.form.FormPanel({
		standardSubmit: true,	
		autoScroll:true,
		border:false,
		id:'innerPanelForDetailsOfRentRoyaltyId',
		layout:'table',		
		items:[{
				xtype:'fieldset', 
				title:'Details of Rent/Royalty/Dead Rent Paid',
				cls:'fieldsetpanels',
				width: 620,
				collapsible: false,
				colspan:6,
				id:'DetailsOfRentRoyaltyId',
				layout:'table',
				layoutConfig: {
					columns:6,
					tableAttrs: {
						style: {width: '100%'}
					  }
				},
			items:[{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryrentpaid'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'rentPaidlab',
					text: 'Rent Paid :'
					},{
					xtype:'numberfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Rent Paid',    			    		
		    		blankText :'Enter Rent Paid',
		    		allowBlank: false,
		    		id:'rentPaidId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryRoyalty'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'Royaltylab',
					text: 'Royalty Paid :'
					},{
					xtype:'numberfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Royalty Paid', 					
		    		blankText :'Enter Royalty Paid',
		    		allowBlank: false,
		    		id:'RoyaltyId'	    		
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatorydeadrent'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'deadRentlab',
					text: 'Dead Rent Paid :'
					},{
					xtype:'numberfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Dead Rent Paid',	    			    		
		    		blankText :'Enter Dead Rent Paid',
		    		allowBlank: false,
		    		id:'deadRentId'	    		
		    		}]					
				}]
	    });
	var reasonComboStore = new Ext.data.SimpleStore({
	      id: 'reasonComboStoreId',
	      fields: ['Name', 'Value'],
	      autoLoad: true,
	      data: [
	          ['Due to strike', 'Due to strike'],
	          ['Lockout', 'Lockout'],
			  ['Heavy rain', 'Heavy rain'],
			  ['Non-Availability of labour', 'Non-Availability of labour'],
			  ['Transport bottleneck', 'Transport bottleneck'],
			  ['Lack of demand', 'Lack of demand'],
			  ['Uneconomic operations', 'Uneconomic operations'],
			  ['Statutory orders', 'Statutory orders'],
			  ['Others', 'Others']
	      ]
	  });
	var innerPanelForWorkDetails = new Ext.form.FormPanel({
		standardSubmit: true,	
		autoScroll:true,
		border:false,
		id:'innerPanelForWorkDetailsId',
		layout:'table',	
		items:[{
				xtype:'fieldset', 
				title:'Mining Work Details',
				cls:'fieldsetpanels',
				width: screen.width-115,
				collapsible: false,
				colspan:9,
				id:'WorkDetailsId',
				layout:'table',
				layoutConfig: {
					columns:6,
					tableAttrs: {
						style: {width: '100%'}
					  }
				},
			items:[{
					xtype: 'label',
					cls:'labelstyle',
					id:'mineWorkedlab',
					text: 'No Of Days Mine Worked :'
					},{
					xtype:'numberfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter No. Of Working Days',    			    		
		    		blankText :'Enter No. Of Working Days',
		    		allowBlank: false,
		    		decimalPrecision:0,
		    		id:'mineWorkedId',
		    		listeners:{
					change: function(){
					var date=Ext.getCmp('DateId').getValue();
				    var month=date.getMonth()+1;
				    var year=date.getFullYear();
				    var days=daysInMonth(month,year);
				    if(Ext.getCmp('mineWorkedId').getValue()>days){
				        Ext.example.msg("Please Enter Valid Days");
                        Ext.getCmp('mineWorkedId').reset();
                        Ext.getCmp('mineWorkedId').focus();
                        return;
				    }
				    var NoOfStopeedDays=days-Ext.getCmp('mineWorkedId').getValue();
				    Ext.getCmp('WorkStoppedId').setValue(NoOfStopeedDays);
				    if(NoOfStopeedDays>0){
	   				  Ext.getCmp('StoppedReasonId').show();
	   				  Ext.getCmp('StoppedReasonlab').show();
	   				  Ext.getCmp('mandatorystoppedreason').show();
	   				}
	   				else{
	   				 Ext.getCmp('StoppedReasonId').reset();
	   				 Ext.getCmp('StoppedReasonId').hide();
	   				 Ext.getCmp('StoppedReasonlab').hide();
	   				 Ext.getCmp('mandatorystoppedreason').hide();
	   				}
					}
					}
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					id:'mandatoryworkstopped'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'WorkStoppedlab',
					text: 'No Of Days Work Stopped :'
					},{
					xtype:'numberfield',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter No Of Days Work Stopped', 					
		    		blankText :'Enter No Of Days Work Stopped',
		    		allowBlank: false,
		    		decimalPrecision:0,
		    		readOnly:true,
		    		id:'WorkStoppedId'
		    		},{
					xtype:'label',
					text:'',
					cls:'mandatoryfield',
					hidden:true,
					id:'mandatorystoppedreason'
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'StoppedReasonlab',
					hidden:true,
					text: 'Work Stopped Reason :'
					},{
					xtype:'combo',
		    		cls:'selectstylePerfect',
		    		emptyText:'Enter Reason',	    			    		
		    		blankText :'Enter Reason',
		    		allowBlank: false,
		    		forceSelection: true,
		    		triggerAction: 'all',
		    		anyMatch: true,
		            onTypeAhead: true,
		            selectOnFocus: true,
		    		store:reasonComboStore,
		    		mode: 'local',
		    		valueField:'Value',
		    		displayField:'Name',
		    		id:'StoppedReasonId',
		    		hidden:true,
		    		listeners : {
		    			select:{
		    				fn:function(){
		    				if(Ext.getCmp('StoppedReasonId').getValue() == 'Others'){
		    				  Ext.getCmp('otherStoppedReasonId').show();
		    				  Ext.getCmp('reasonLab').show();
		    				  Ext.getCmp('mandatoryreason').show();
		    				}
		    				else{
		    				 Ext.getCmp('otherStoppedReasonId').reset();
		    				 Ext.getCmp('otherStoppedReasonId').hide();
		    				 Ext.getCmp('reasonLab').hide();
		    				 Ext.getCmp('mandatoryreason').hide();
		    				}
		              			}
		    				}
	    				}	    		
		    		},{
					xtype:'label',
					text:'*',
					cls:'mandatoryfield',
					id:'mandatoryreason',
					hidden:true
					},{
					xtype: 'label',
					cls:'labelstyle',
					id:'reasonLab',
					text: 'Enter Reason :',
					hidden:true
					},{
					xtype:'textarea',
					height:50,
					width:250,
		    		emptyText:'Enter Reason',    			    		
		    		blankText :'Enter Reason',
		    		allowBlank: false,
		    		hidden:true,
		    		id:'otherStoppedReasonId'	    		
		    		}]
                    }]					
	    });	
	var challanReader = new Ext.data.JsonReader({
	      idProperty: 'challanRootId',
	      root: 'challanRoot',
	      totalProperty: 'total',
	      fields: [{
	          		
	          		name: 'SLNOIndex'
	      		 },{
	          		
	          		name: 'autoIncIdIndex'
	      		 },{
	          		
	          		name: 'challanNumberIndex'
	      		 },{
	          		
	          		name: 'challanDateIndex',
	          		type:'date',
	          		dateFormat:'c'
	      		 },{
	          		
	          		name: 'quantityIndex'
	      		 },{
	          		
	          		name: 'gradeIndex'
	      		 },{
	          		
	          		name: 'typeIndex'
	      		 },{
	          		
	          		name: 'royalityRateIndex'
	      		 },{
	          		
	          		name: 'valuePaidIndex'
	      		 }]
	    });
    var challanFilters = new Ext.ux.grid.GridFilters({
        local: true,
        filters: [{
			        type: 'int',
			        dataIndex: 'SLNOIndex'
			    },{
		            type: 'int',
		            dataIndex: 'autoIncIdIndex'		            
        		 },{
		            type: 'string',
		            dataIndex: 'challanNumberIndex'		            
        		 },{
		            type: 'date',
		            dataIndex: 'challanDateIndex'
        		 },{
		            type: 'float',
		            dataIndex: 'quantityIndex'		            
        		 },{
		            type: 'string',
		            dataIndex: 'gradeIndex'	            
        		 },{
		            type: 'string',
		            dataIndex: 'typeIndex'	            
        		 },{
		            type: 'float',
		            dataIndex: 'royalityRateIndex'	            
        		 },{
		            type: 'float',
		            dataIndex: 'valuePaidIndex'		           
        		 }]
	 });
     var columnModel = new Ext.grid.ColumnModel({
	    columns: [{
	    		header: "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            width: 50,
	            hidden: false	            	            
	         },{
		        header: "<span style=font-weight:bold;>Auto Inc ID</span>",
		        sortable: true,
		        hidden: true,	 
		        dataIndex: 'autoIncIdIndex'
		    },{
		        header: "<span style=font-weight:bold;>Challan Number</span>",
		        sortable: true,
		        width: 170,
		        dataIndex: 'challanNumberIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.TextField)
		    },{
		        header: "<span style=font-weight:bold;>Challan Date</span>",
		        sortable: false,
		        width: 170,
		        dataIndex: 'challanDateIndex',
		        renderer: Ext.util.Format.dateRenderer(getDateFormat()),
		        editor: new Ext.grid.GridEditor(new Ext.form.DateField({format:getDateFormat()})),
		        filter: {
                    type: 'date'
                }
		    },{
		        header: "<span style=font-weight:bold;>Quantity</span>",
		        sortable: false,
		        width: 170,
		        dataIndex: 'quantityIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Grade</span>",
		        sortable: false,
		        width: 170,
		        dataIndex: 'gradeIndex',
		        editor: new Ext.grid.GridEditor(gradeCombo)
		    },{
		        header: "<span style=font-weight:bold;>Type</span>",
		        sortable: false,
		        width: 170,
		        dataIndex: 'typeIndex',
		        editor: new Ext.grid.GridEditor(typeCombo)
		    },{
		        header: "<span style=font-weight:bold;>Provisional Royalty Rate</span>",
		        sortable: true,
		        width: 170,
		        dataIndex: 'royalityRateIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Value Paid</span>",
		        sortable: false,
		        width: 170,
		        dataIndex: 'valuePaidIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },]
	    });
	var challanStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getChallanDetails',
	            method: 'POST'
	        }),
	        reader: challanReader
	});
	var challan = Ext.data.Record.create([
              	{name:'SLNOIndex'},
              	{name:'autoIncIdIndex'},
              	{name: 'challanNumberIndex'},
              	{name: 'challanDateIndex'},
              	{name: 'quantityIndex'},
              	{name: 'gradeIndex'},
	      		{name:'typeIndex'},
	      		{name:'royalityRateIndex'},
	      		{name:'valuePaidIndex'}
        ]);
	var selModel=new Ext.grid.RowSelectionModel({
      singleSelect:true
	});
	var outerPanelForChallanGrid = new Ext.grid.EditorGridPanel({ 
		title:'Royalty Paid Challan Details',
        layout:'fit',
        height: 350,
        width:screen.width-78,
        autoScroll:true,
        border: false,
        store: challanStore,
        id:'challanGridId',
        colModel: columnModel,
        sm		: selModel,	        
        plugins: [challanFilters],
        clicksToEdit: 1,
        tbar: [{
            text: 'Add',
            handler : function(){ 
            	var Plant = outerPanelForChallanGrid.getStore().recordType;
            	newRowAdded++;
	                var p = new challan({
	                   	SLNOIndex:newRowAdded,
	                   	autoIncIdIndex:'',	 
		             	challanNumberIndex:'',
		             	challanDateIndex:'',
		             	quantityIndex:'',
		             	gradeIndex:'',
			      		typeIndex:'',
			      		royalityRateIndex:'',
			      		valuePaidIndex:''
	                });               
	                outerPanelForChallanGrid.stopEditing();
	                challanStore.insert(0, p);
	                outerPanelForChallanGrid.startEditing(0, 0);
             }
		}]
    });
    outerPanelForChallanGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRows.split(",");
            var isIn=0;
            for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRows = editedRows+slno+",";
			}
    	 }
    });    
	var employmentReader = new Ext.data.JsonReader({
	      idProperty: 'employmentRootId',
	      root: 'employmentRoot',
	      totalProperty: 'total',
	      fields: [{
	          		
	          		name: 'SLNOIndex'
	      		 },{
	      		 	name: 'autoIncIdIndex'
	      		 },{
	          		name: 'workPlaceIndex'
	      		 },{
	          		
	          		name: 'maleLabourIndex'
	      		 },{
	          		
	          		name: 'femaleLabourIndex'
	      		 },{
	          		
	          		name: 'contractMaleLabourIndex'
	      		 },{
	          		
	          		name: 'contractFemaleLabourIndex'
	      		 },{
	          		
	          		name: 'directWagesLabourIndex'
	      		 },{
	          		
	          		name: 'contractWagesLabourIndex'
	      		 }]
	    });
    var employmentFilters = new Ext.ux.grid.GridFilters({
        local: true,
        filters: [{
			        type: 'int',
			        dataIndex: 'SLNOIndex'
			    },{
		            type: 'int',
		            dataIndex: 'autoIncIdIndex'		            
        		 },{
		            type: 'string',
		            dataIndex: 'workPlaceIndex',		            
        		 },{
		            type: 'int',
		            dataIndex: 'maleLabourIndex',		            
        		 },{
		            type: 'int',
		            dataIndex: 'femaleLabourIndex',		            
        		 },{
	          		type: 'int',
	          		dataIndex: 'contractMaleLabourIndex'
	      		 },{
		            type: 'int',
		            dataIndex: 'contractFemaleLabourIndex',		            
        		 },{
		            type: 'int',
		            dataIndex: 'directWagesLabourIndex',		            
        		 },{
	          		type: 'int',
	          		dataIndex: 'contractWagesLabourIndex'
	      		 }]
	 });
     var columnModel = new Ext.grid.ColumnModel({
	    columns: [{
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            hidden:true,
	            width : 50
	        },{
		        header: "<span style=font-weight:bold;>Auto Inc ID</span>",
		        sortable: true,
		        hidden: true,	 
		        dataIndex: 'autoIncIdIndex'
		    },{
		        header: "<span style=font-weight:bold;>Work Place</span>",
		        sortable: true,
		        width: 170,
		        dataIndex: 'workPlaceIndex'
		    },{
		        header: "<span style=font-weight:bold;>Direct Labour Male</span>",
		        sortable: true,
		        width: 170,
		        dataIndex: 'maleLabourIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:0}))
		    },{
		        header: "<span style=font-weight:bold;>Direct Labour Female</span>",
		        sortable: false,
		        width: 180,
		        dataIndex: 'femaleLabourIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:0}))
		    },{
		        header: "<span style=font-weight:bold;>Contract Labour Male</span>",
		        sortable: false,
		        width: 170,
		        dataIndex: 'contractMaleLabourIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:0}))
		    },{
		        header: "<span style=font-weight:bold;>Contract Labour Female</span>",
		        sortable: false,
		        width: 180,
		        dataIndex: 'contractFemaleLabourIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:0}))
		    },{
		        header: "<span style=font-weight:bold;>Direct Wages</span>",
		        sortable: false,
		        width: 170,
		        dataIndex: 'directWagesLabourIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2 }))
		    },{
		        header: "<span style=font-weight:bold;>Contract Wages</span>",
		        sortable: false,
		        width: 170,
		        dataIndex: 'contractWagesLabourIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({ decimalPrecision:2 }))
		    }]
	    });
	var employmentStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getDailyEmploymentDetails',
	            method: 'POST'
	        }),
	        reader: employmentReader
	});
	var selModel=new Ext.grid.RowSelectionModel({
      singleSelect:true
	});
	var outerPanelForGrid = new Ext.grid.EditorGridPanel({ 
		title:'Average Daily Employment Of Labour And Wages Paid',
        layout:'fit',
        height: 200,
        width:screen.width-80,
        autoScroll:true,
        border: false,
        store: employmentStore,
        id:'employmentgridId',
        colModel: columnModel,
        sm		: selModel,	        
        plugins: [employmentFilters],
        clicksToEdit: 1
    });
    
    outerPanelForGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
    	 	var slno = e.record.data['SLNOIndex'];
            var temp = editedRows.split(",");
            var isIn=0;
            for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRows = editedRows+slno+",";
			}
            if(field!='workPlaceIndex'){
            	gettotal(field);
            }
    	 }
    });
    outerPanelForGrid.on({
	    beforeedit: function(e){
				var cellEditable = e.record.get('workPlaceIndex');
				if (cellEditable == "Below Ground")
				return false;
				else
				return true;
			}
    });
    
    function gettotal(e)
    {
    var femalelabtotal = 0;
    	outerPanelForGrid.store.each(function(record1)
	    	{
	      		if(record1.data['workPlaceIndex']!='Total' && record1.data[e]!=''){
					femalelabtotal = (parseFloat(parseFloat(femalelabtotal))+parseFloat(record1.data[e]));
				}			
	    	})
			outerPanelForGrid.store.each(function(record1)
	    	{
	      		if(record1.data['workPlaceIndex']=='Total'){
					record1.set(e, femalelabtotal);
				}			
	    	})
    }
	var detailsPanel = new Ext.Panel({
       standardSubmit: true,
       collapsible: false,
       id: 'detailsPanelId',
       layout: 'table',
       frame: false,
       height: 50,
       layoutConfig: {
           columns: 5
       },
       items: [{
	            xtype: 'label',
	            text: '',
	            cls: 'labelstyle',
	            height:5,
	            id:'wxyz'
	        },{
	            xtype: 'label',
	            text: '',
	            cls: 'labelstyle',
	            height:5,
	            id:'pqrs'
	        },{
	            xtype: 'label',
	            text: '',
	            cls: 'labelstyle',
	            height:5,
	            width:200,
	            id:'abcd'
	        },{
	            xtype: 'label',
	            text: '',
	            cls: 'labelstyle',
	            height:5,
	            id:'abcde'
	        },{
	            xtype: 'label',
	            text: '',
	            cls: 'labelstyle',
	            height:5,
	            id:'lmn'
	        },{
	           xtype: 'label',
	           text: 'Total No. Of Technical Staff' + ' :',
	           cls: 'labelstyle',
	           id: 'technicalSupervisoryLab'
	       },{
	           xtype: 'numberfield',
	           id: 'technicalSupervisoryId',
	           cls: 'labelForUserInterface',
	           emptyText:'Enter Total number of technical Staff',    			    		
    		   blankText :'Enter Total number of technical Staff',
    		   decimalPrecision:0,
    		   allowBlank: false
	       },{
	            xtype: 'label',
	            text: '',
	            cls: 'labelstyle',
	            width:200,
	            id:'pqr'
	        },{
	           xtype: 'label',
	           text: 'Total Salaries Paid To Technical Staff' + ' :',
	           cls: 'labelstyle',
	           id: 'totalSalariesPaidLab'
	       },{
	           xtype: 'numberfield',
	           id: 'totalSalariesPaidId',
	           cls: 'labelForUserInterface',
	           emptyText:'Enter Total Salaries Paid To Technical Staff',    			    		
    		   blankText :'Enter Total Salaries Paid To Technical Staff',
    		   decimalPrecision:2,
    		   allowBlank: false
       		}]
    	});
	
	var PanelForFormOne = new Ext.Panel({
       standardSubmit: true,
       collapsible: false,
       autoScroll: true,
       border:false,
       id: 'PanelForFormOneId',
       layout: 'table',
       layoutConfig: {
           columns: 2
       },
           items: [innerPanelForDetailsMining,innerPanelForLocationMining,innerPanelForNameAndAddress,innerPanelForDetailsOfRentRoyalty]
   });     
	var innerPanelForFormOne = new Ext.Panel({
       standardSubmit: true,
       collapsible: false,
       autoScroll: true,
       border:false,
       width: screen.width-26,
       height:395,
       id: 'innerPanelForFormOneId',
       layout: 'table',
       layoutConfig: {
           columns: 1
       },
           items: [PanelForFormOne,outerPanelForChallanGrid,innerPanelForWorkDetails,outerPanelForGrid,detailsPanel]
   });
   var buttonPanel=new Ext.FormPanel({
       	id: 'buttonid',
       	cls:'colorid',
       	frame:true,
           buttons:[{
              		text: 'Back',
              		cls:'colorid',
              		iconCls:'backbutton',
              		hidden:false,
              		handler : function(){
              				if('<%=loadForDashboardDetails%>' != 'loadForDashboardDetails'){
								var MonthlyReturn='/Telematics4uApp/Jsps/IronMining/MonthlyReturn.jsp';
			              		parent.Ext.getCmp('partOneTab').disable();
			              		parent.Ext.getCmp('generalLabourTab').enable();
			              		parent.Ext.getCmp('generalLabourTab').show();
		              		}else{
		              			var MonthlyReturn='/Telematics4uApp/Jsps/IronMining/MonthlyReturnDashboardDetails.jsp';
			              		parent.Ext.getCmp('partOneTab').disable();
			              		parent.Ext.getCmp('monthlyReturnsDashboardDetailsTab').enable();
			              		parent.Ext.getCmp('monthlyReturnsDashboardDetailsTab').show();
		              		}
						}
              		},{
              		text: 'Save & Continue',
              		cls:'colorid',
              		iconCls:'savebutton',
              		id:'savecontinue',
              		handler : function(){
              		if(Ext.getCmp('DateId').getValue() == ""){
	            		Ext.example.msg("Enter Date");
		                Ext.getCmp('DateId').focus();
		                return;
	            	}
	            	if(Ext.getCmp('regionId').getValue() == ""){
	            		Ext.example.msg("Enter Region");
		                Ext.getCmp('regionId').focus();
		                return;
	            	}
	            	if(Ext.getCmp('pinsId').getValue() == ""){
	            		Ext.example.msg("Enter PIN");
		                Ext.getCmp('pinsId').focus();
		                return;
	            	}
	            	if(Ext.getCmp('regId').getValue() == ""){
	            		Ext.example.msg("Enter IBM Reg. No.");
		                Ext.getCmp('regId').focus();
		                return;
	            	}
	            	if(Ext.getCmp('mineralsnameId').getValue() == ""){
	            		Ext.example.msg("Enter Minerals Name");
		                Ext.getCmp('mineralsnameId').focus();
		                return;
	            	}
	            	if(Ext.getCmp('minecodeId').getValue() == ""){
	            		Ext.example.msg("Enter Mine Code");
		                Ext.getCmp('minecodeId').focus();
		                return;
	            	}	
	            	if(Ext.getCmp('tcNoId').getValue() == ""){
	            		Ext.example.msg("Enter TC No.");
		                Ext.getCmp('tcNoId').focus();
		                return;
	            	}            	
	            	if(Ext.getCmp('minesId').getValue() == ""){
	            		Ext.example.msg("Enter Name of Mine");
		                Ext.getCmp('minesId').focus();
		                return;
	            	}
	            	if(Ext.getCmp('nameAndAddressComboId').getValue() == ""){
	            		Ext.example.msg("Enter Name of Person");
		                Ext.getCmp('nameAndAddressComboId').focus();
		                return;
	            	}
	            	var reason = Ext.getCmp('StoppedReasonId').getValue();
                    if(reason == 'Others'){
                        if(Ext.getCmp('otherStoppedReasonId').getValue() == ""){
                        Ext.example.msg("Enter Other Reason");
                        Ext.getCmp('otherStoppedReasonId').focus();
                        return;
                        }
                    }
	            	
				 	Ext.MessageBox.confirm('Confirm', 'Are you sure you want to save?',showResult);
              	 }
              }]
	 });
	 function showResult(btn){
	 	 if(btn == 'yes'){
        	var json = '';
        	var challanJson = '';
           	var valid = true; 
           	challanTemp=editedRows.split(",");
           	temp=editedRows.split(",");
			var isIn=0;
			for(var i=0;i<temp.length;i++){
				var row = outerPanelForGrid.store.find('SLNOIndex',temp[i]);
				if(row==-1){
					continue;
				}
				var store = outerPanelForGrid.store.getAt(row);
				json += Ext.util.JSON.encode(store.data) + ',';
			}
			if(valid==false){  										
				return;
			}else if(json!=''){
				json = json.substring(0, json.length - 1);
			}
		for(var i=0;i<challanTemp.length;i++){
			var row2 = outerPanelForChallanGrid.store.find('SLNOIndex',challanTemp[i]);
			if(row2==-1){
			continue;
		}
		var store2 =outerPanelForChallanGrid.store.getAt(row2);
		challanJson += Ext.util.JSON.encode(store2.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(challanJson!=''){
			challanJson = challanJson.substring(0, challanJson.length - 1);
		}
			typeOfOre = Ext.getCmp('mineralsnameId').getValue();
			loadMask.show();
           	Ext.Ajax.request({
                url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=insertGeneralAndLabourDetails',
                method: 'POST',
                params: {
             	custId:'<%=custId%>',
             	custName:'<%=custName%>',
             	date:Ext.getCmp('DateId').getValue(),
				region:Ext.getCmp('regionId').getValue(),
				pin:Ext.getCmp('pinsId').getValue(),
				regNo:Ext.getCmp('regId').getValue(),
				mineCode:mineCode,
				mineralsName:Ext.getCmp('mineralsnameId').getValue(),
				tcNoId:Ext.getCmp('tcNoId').getValue(),
				mineId:Ext.getCmp('minesId').getValue(),
				otherMine:Ext.getCmp('othersmineId').getValue(),
				nameAndAddress:mineOwnerId,
				rentPaid:Ext.getCmp('rentPaidId').getValue(),
				rayaltyPaid:Ext.getCmp('RoyaltyId').getValue(),
				deadRent:Ext.getCmp('deadRentId').getValue(),
				mineWorkedId:Ext.getCmp('mineWorkedId').getValue(),
				wrokStopped:Ext.getCmp('WorkStoppedId').getValue(),
				stoppedReason:Ext.getCmp('StoppedReasonId').getValue(),
				technicalStaff:Ext.getCmp('technicalSupervisoryId').getValue(),
				totalSalary:Ext.getCmp('totalSalariesPaidId').getValue(),
				otherStoppedReason:Ext.getCmp('otherStoppedReasonId').getValue(),
				jsondata:json,
				challanJson:challanJson,
				autoGeneratedId:autoGeneratedKeys						                           	                       
                },
                success: function (response, options) {
                   var autoGeneratedKeys = response.responseText;
                   if(autoGeneratedKeys > 0){
                        loadMask.hide();
                        var mineName =Ext.getCmp('minesId').getValue();
                        var month=Ext.getCmp('DateId').getValue().getMonth()+1;
                        Ext.example.msg("Saved Successfully");
                        var MonthlyReturnsFormOnePartTwo='/Telematics4uApp/Jsps/IronMining/MonthlyReturnsFormOnePartTwo.jsp?typeOfOre='+typeOfOre+'&autoGeneratedKeys='+autoGeneratedKeys+'&custId='+custId+'&custName='+custName+'&loadForDashboardDetails='+loadForDashboardDetails+'&type='+type+'&startdate='+'<%=startdate%>'+'&enddate='+'<%=enddate%>'+'&reloadPrevRec='+'<%=reloadPrevRec%>';
				  		parent.Ext.getCmp('partTwoTab').enable();
				  		parent.Ext.getCmp('partOneTab').disable();
				  		parent.Ext.getCmp('partTwoTab').show();
				  		parent.Ext.getCmp('partTwoTab').update("<iframe style='width:100%;height:525px;border:0;' src='"+MonthlyReturnsFormOnePartTwo+"'></iframe>");
			  		}else{
			  			loadMask.hide();
			  	 		Ext.example.msg("Saving Unsuccessfull");
			  		}
               },
               failure: function () {
               	   loadMask.hide();
                   Ext.example.msg("Error");		                                
                 }
           });    
        }
     }
     function getMonthYearFormat(){
		return 'F Y';
	}
	 Ext.onReady(function () {
		    Ext.QuickTips.init();
		    Ext.form.Field.prototype.msgTarget = 'side';
		    outerPanel = new Ext.Panel({
		        title: 'Authorise Monthly Returns',		        
		        standardSubmit: true,
		        frame: false,
		        width: screen.width-22,
		        height:520,
		        renderTo: 'content',
		        cls: 'outerpanel',
		        layout: 'table',
		        layoutConfig: {
		            columns: 1
		        },
		        items: [innerPanelForFormOne,buttonPanel]
		    });
		    if('<%=reloadPrevRec %>' == 'reloadPrevRec'){
		    	detailsAndLocationOfMineComboStore.load({
		    	params:{monthlyId:autoGeneratedKeys},
		    	callback:function(){
		    		if(detailsAndLocationOfMineComboStore.getCount()>0){
		    			var record = detailsAndLocationOfMineComboStore.getAt(0);
		    			mineCode = record.data['mineIdIndex'];
		    			typeOfOre = record.data['mineralNameIndex'];
		    			Ext.getCmp('DateId').setValue(record.data['dateIndex']);
						Ext.getCmp('regionId').setValue(record.data['regionIndex']);
						Ext.getCmp('regId').setValue(record.data['registrationIndex']);
						Ext.getCmp('mineralsnameId').setValue(typeOfOre);
						Ext.getCmp('minecodeId').setValue(record.data['mineCodeIndex']);
						Ext.getCmp('tcNoId').setValue(record.data['TCNOIndex']);
						Ext.getCmp('minesId').setValue(record.data['mineNameIndex']);
						Ext.getCmp('villageId').setValue(record.data['villageIndex']);
						Ext.getCmp('postOfficeId').setValue(record.data['postOfficeIndex']);
						Ext.getCmp('tahsilId').setValue(record.data['talukaNameIndex']);
						Ext.getCmp('districtId').setValue(record.data['districtNameIndex']);
						Ext.getCmp('stateId').setValue(record.data['stateNameIndex']);
						Ext.getCmp('pinId').setValue(record.data['PINIndex']);
						Ext.getCmp('faxId').setValue(record.data['FAXNOIndex']);
						Ext.getCmp('phoneId').setValue(record.data['phoneNoIndex']);
						Ext.getCmp('emailId').setValue(record.data['emailIdIndex']);
						Ext.getCmp('othersmineId').setValue(record.data['otherMineralsNameIndex']);
						Ext.getCmp('rentPaidId').setValue(record.data['rentPaidIndex']);
						Ext.getCmp('RoyaltyId').setValue(record.data['royaltyPaidIndex']);
						Ext.getCmp('deadRentId').setValue(record.data['deadRentPaidIndex']);
						Ext.getCmp('mineWorkedId').setValue(record.data['mineWorkDaysIndex']);
						Ext.getCmp('WorkStoppedId').setValue(record.data['mineNonWorkDaysIndex']);
						Ext.getCmp('StoppedReasonId').setValue(record.data['reasonForNotWorkedIndex']);
						if(record.data['reasonForNotWorkedIndex']!=''){
						  Ext.getCmp('StoppedReasonId').show();
						  Ext.getCmp('StoppedReasonlab').show();
						}
						Ext.getCmp('otherStoppedReasonId').setValue(record.data['otherStoppedReasonIndex']);
						if(record.data['reasonForNotWorkedIndex'] ==  'Others'){
	    				  Ext.getCmp('otherStoppedReasonId').show();
	    				  Ext.getCmp('reasonLab').show();
	    				  Ext.getCmp('mandatoryreason').show();
	    				  Ext.getCmp('otherStoppedReasonId').setValue(record.data['otherStoppedReasonIndex']);
		    			}
						Ext.getCmp('technicalSupervisoryId').setValue(record.data['technicalStaffIndex']);
						Ext.getCmp('totalSalariesPaidId').setValue(record.data['totalSalariesIndex']);
						gradeComboStore.load({params:{typeOfOre:record.data['mineralNameIndex']}});
		    		}
		    	}
		    });
		    nameAddressOfLesseeOwnerStore.load({
		    	params:{custId:'<%=custId%>',monthlyId:autoGeneratedKeys},
		    	callback:function(){
		    		if(nameAddressOfLesseeOwnerStore.getCount() >0){
		    			var record = nameAddressOfLesseeOwnerStore.getAt(0);
		    			mineOwnerId = record.data['mineOwnerIdIndex'];
		    			Ext.getCmp('nameAndAddressComboId').setValue(record.data['contactPersonIndex']);
						Ext.getCmp('streetId').setValue(record.data['villageIndex']);
						Ext.getCmp('postId').setValue(record.data['postIndex']);
						Ext.getCmp('talukId').setValue(record.data['talukaIndex']);
						Ext.getCmp('distId').setValue(record.data['districtIndex']);
						Ext.getCmp('statesId').setValue(record.data['stateIndex']);
						Ext.getCmp('pincodeId').setValue(record.data['pinIndex']);
						Ext.getCmp('faxNoId').setValue(record.data['faxIndex']);
						Ext.getCmp('phoneNoId').setValue(record.data['phoneIndex']);
						Ext.getCmp('emailIdId').setValue(record.data['emailIndex']);
		    		}
		    	}
		    });
		    }
		    challanStore.load({params:{autoGeneratedId:autoGeneratedKeys}});
		    employmentStore.load({params:{autoGeneratedId:autoGeneratedKeys}});
		    mineCodeComboStore.load({params:{custId:'<%=custId%>'}});
		    nameAndAddressStore.load({params:{custId:'<%=custId%>'}});
		});
	</script>
  </body>
</html>
