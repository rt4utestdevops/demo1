<%@ page language="java" import="java.util.*,java.text.SimpleDateFormat,t4u.functions.*,t4u.beans.*,t4u.common.*" pageEncoding="utf-8"%>
<%@ taglib uri="http://packtag.sf.net" prefix="pack" %>
<%
String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
if(request.getParameter("list")!=null){
	String list=request.getParameter("list").toString().trim();
	String[] str=list.split(",");
	int systemid=Integer.parseInt(str[0].trim());
	int customerid=Integer.parseInt(str[1].trim());
	int userid=Integer.parseInt(str[2].trim());
	String language=str[3].trim();
	LoginInfoBean loginInfo=new LoginInfoBean();
	loginInfo.setSystemId(systemid);
	loginInfo.setCustomerId(customerid);
	loginInfo.setUserId(userid);
	loginInfo.setLanguage(language);
	loginInfo.setZone(str[4].trim());
	loginInfo.setOffsetMinutes(Integer.parseInt(str[5].trim()));
	loginInfo.setSystemName(str[6].trim());
	loginInfo.setCategory(str[7].trim());
	loginInfo.setStyleSheetOverride("N");
	if(str.length>8){
		loginInfo.setCustomerName(str[8].trim());
	}
	if(str.length>9){
		loginInfo.setCategoryType(str[9].trim());
	}
	if(str.length>10){
		loginInfo.setUserName(str[10].trim());
	}
	session.setAttribute("loginInfoDetails",loginInfo);	
}	
CommonFunctions cf = new CommonFunctions();
cf.checkLoginInfo((LoginInfoBean) session.getAttribute("loginInfoDetails"), session, request, response);
String responseaftersubmit="''";
if(session.getAttribute("responseaftersubmit")!=null){
   	responseaftersubmit="'"+session.getAttribute("responseaftersubmit").toString()+"'";
	session.setAttribute("responseaftersubmit",null);
}		
LoginInfoBean loginInfo = (LoginInfoBean) session.getAttribute("loginInfoDetails");
String language = loginInfo.getLanguage();
int systemId = loginInfo.getSystemId();
int customerId = loginInfo.getCustomerId();
String typeOfOre = "";
int autoGeneratedKeys = 0;
if(request.getParameter("typeOfOre") != null && !request.getParameter("typeOfOre").equals("")){
	typeOfOre = request.getParameter("typeOfOre"); 
}
if(request.getParameter("autoGeneratedKeys") != null && !request.getParameter("autoGeneratedKeys").equals("")){
	autoGeneratedKeys = Integer.parseInt(request.getParameter("autoGeneratedKeys"));
}
int custId= 0;
String custName="";
if(request.getParameter("custId") != null && !request.getParameter("custId").equals("")){
	custId = Integer.parseInt(request.getParameter("custId")); 
}
if(request.getParameter("custName") != null && !request.getParameter("custName").equals("")){
	custName = request.getParameter("custName");
}
String startdate="";
String enddate="";
if(request.getParameter("startdate") != null && !request.getParameter("startdate").equals("") && request.getParameter("enddate") != null && !request.getParameter("enddate").equals("")){
	startdate = request.getParameter("startdate");
	enddate = request.getParameter("enddate");
}
String reloadPrevRec = "";
if(request.getParameter("reloadPrevRec") != null && !request.getParameter("reloadPrevRec").equals("")){
	reloadPrevRec = request.getParameter("reloadPrevRec"); 
}
String loadForDashboardDetails="";
if(request.getParameter("loadForDashboardDetails") != null && !request.getParameter("loadForDashboardDetails").equals("")){
	loadForDashboardDetails = request.getParameter("loadForDashboardDetails"); 
}
String type = "";
if(request.getParameter("type") != null && !request.getParameter("type").equals("")){
	type = request.getParameter("type");
}
%>

<!DOCTYPE HTML>
<html>
  <head>
    <base href="<%=basePath%>">
    
    <title>MonthlyReturnsFormOnePartTwo</title>
    
	<meta http-equiv="pragma" content="no-cache">
	<meta http-equiv="cache-control" content="no-cache">
	<meta http-equiv="expires" content="0">    
	<meta http-equiv="keywords" content="keyword1,keyword2,keyword3">
	<meta http-equiv="description" content="This is my page">
	

  </head>
  
  <body>
  	<%if (loginInfo.getStyleSheetOverride().equals("Y")){%>
	<jsp:include page="../Common/ImportJSSandMining.jsp"/>
	<%}else{%>
	<jsp:include page="../Common/ImportJS.jsp" />
   	<%}%>
   	<jsp:include page="../Common/ExportJS.jsp" />
    <script>
    var editedRowsOfOreProductionGrid="";
    var editedRowsOfRomProcessingGrid="";
    var editedRowsOfOversizeGrid="";
    var editedRowsOfoversizeProcessingGrid="";
    var editedRowsOfproductGeneratedGrid="";
    var newRowAdded = 0;
    var typesOfOre = '<%=typeOfOre%>';
    var  autoGeneratedKeys = '<%=autoGeneratedKeys%>';
    var custId = '<%=custId%>';
    var custName = '<%=custName%>';
    var loadForDashboardDetails = '<%=loadForDashboardDetails%>';
    var type = '<%=type%>';
    var loadMask = new Ext.LoadMask(Ext.getBody(), { msg: "Saving" });
    var id;
var plugin;
var editor;


   var romProcessingReader = new Ext.data.JsonReader({   
	      idProperty: 'romProcessingRootId',
	      root: 'romProcessingRoot',
	      totalProperty: 'total',
	      fields: [{	          		
	          		name: 'SLNOIndex'
	      		 },{	          		
	          		name: 'autoIncIdIndex'
	      		 },{
	          		name: 'plantLocationIndex'
	      		 },{
	          		name: 'openingRomIndex'
	      		 },{
	          		name: 'receiptIndex'
	      		 },{
	          		name: 'romProcessedIndex'
	      		 },{
	          		name: 'closingStockromIndex'
	      		 }]
	    });
     var romProcessingFilters = new Ext.ux.grid.GridFilters({
	        local: true,
	        filters: [{
				        type: 'int',
				        dataIndex: 'SLNOIndex'
				    },{
			            type: 'int',
			            dataIndex: 'autoIncIdIndex',		            
	        		 },{
			            type: 'string',
			            dataIndex: 'plantLocationIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'openingRomIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'receiptIndex',		            
	        		 },{
		          		type: 'int',
		          		dataIndex: 'romProcessedIndex'
		      		 },{
		          		type: 'int',
		          		dataIndex: 'closingStockromIndex'
		          	 }]
	    });

    var romProcessingColModel = new Ext.grid.ColumnModel({
	    columns: [
	     	new Ext.grid.RowNumberer({
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            width : 50
	        }),{
	            header: "<span style=font-weight:bold;>SLNO</span>",
	            width: 30,
	            hidden: true,	            
				dataIndex: 'SLNOIndex'
	        },{
	            header: "<span style=font-weight:bold;>Auto Inc ID</span>",
	            width: 50,
	            hidden: true,	            
				dataIndex: 'autoIncIdIndex'
	        },{
		        header: "<span style=font-weight:bold;>Location Of Plant</span>",
		        sortable: true,
		        width:250,
		        dataIndex: 'plantLocationIndex',
				editor: new Ext.grid.GridEditor(new Ext.form.TextField({}))
		    },{
		        header: "<span style=font-weight:bold;>Opening Stock Of ROM</span>",
		        sortable: true,
		        width:250,
		        dataIndex: 'openingRomIndex',
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Receipt Of ROM during the month</span>",
		        sortable: true,
		        width:200,
		        dataIndex: 'receiptIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>ROM Processed During the month</span>",
		        sortable: false,
		        width:300,
		        dataIndex: 'romProcessedIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Closing Stock Of ROM</span>",
		        sortable: false,
		        width:200,
		        dataIndex: 'closingStockromIndex'
		    }]
	   });

	   var ROMProcessingStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getROMProcessingDetails',
	            method: 'POST'
	        }),
	        reader: romProcessingReader
	    });
	    var romProcessingplant = Ext.data.Record.create([
              	{name:'SLNOIndex'},
              	{name:'autoIncIdIndex'},
	      		{name:'plantLocationIndex'},
	      		{name:'openingRomIndex'},
	      		{name:'receiptIndex'},
	      		{name:'romProcessedIndex'},
	      		{name:'closingStockromIndex'}
        ]);
	   var selModROMProcessing=new Ext.grid.RowSelectionModel({
	      singleSelect:true
		}); 
		var ROMProcessingGrid = new Ext.grid.EditorGridPanel({ 
			title:'ROM Processing',
			height: 350,
	        width:screen.width-60,
	        autoScroll:true,
	        border: false,
	        store: ROMProcessingStore,
	        id:'ROMProcessingGridId',
	        colModel: romProcessingColModel,
	        sm		: selModROMProcessing,	        
	        plugins: [romProcessingFilters],
	        clicksToEdit: 1,
	        tbar: [{
            text: 'Add',
            handler : function(){ 
            	var Plant = ROMProcessingGrid.getStore().recordType;
            	newRowAdded++;
            	if(newRowAdded<13){
	                var p = new romProcessingplant({
	                   	SLNOIndex:newRowAdded,
	                   	autoIncIdIndex:'',
			      		plantLocationIndex:'',
			      		openingRomIndex:'',
			      		receiptIndex:'',
			      		romProcessedIndex:'',
			      		closingStockromIndex:''
	                });               
	                ROMProcessingGrid.stopEditing();
	                ROMProcessingStore.insert(0, p);
	                ROMProcessingGrid.startEditing(0, 0);
                 }
             }
		}]
		});	
        ROMProcessingGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRowsOfRomProcessingGrid.split(",");
            var isIn=0;
			for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRowsOfRomProcessingGrid = editedRowsOfRomProcessingGrid+slno+",";
			}
			if(field == 'openingRomIndex' || field == 'receiptIndex' || field == 'romProcessedIndex'){
                finalRomClosingStock(e);
            }
    	 }
    	});    
    	function finalRomClosingStock(e) {
           ROMProcessingGrid.store.each(function(record){
           		if((parseFloat(e.record.data['openingRomIndex']) + parseFloat(e.record.data['receiptIndex'])) >= parseFloat(e.record.data['romProcessedIndex'])){
                 e.record.set('closingStockromIndex',(parseFloat(e.record.data['openingRomIndex']) + parseFloat(e.record.data['receiptIndex'])) - parseFloat(e.record.data['romProcessedIndex']));        
            	}else if(e.record.data['openingRomIndex']!='' && e.record.data['receiptIndex']!='' && e.record.data['romProcessedIndex']!='')
            	{
            	e.record.set('closingStockromIndex','');
            	e.record.set('romProcessedIndex','');
            	Ext.example.msg("ROM Processed During the Month should less than sum of Receipt of ROM and Opening Stock of ROM");
            	}	
            });
        } 

       var processedOreReader = new Ext.data.JsonReader({
	      idProperty: 'processedOreRootId',
	      root: 'processedOreRoot',
	      totalProperty: 'total',
	      fields: [{	          		
	          		name: 'SLNOIndex'
	      		 },{	          		
	          		name: 'autoIncIdIndex'
	      		 },{
	          		name: 'ROMgradeIndex'
	      		 },{
	          		name: 'finesIndex'
	      		 },{
	          		name: 'lumpsIndex'
	      		 },{
	          		name: 'oversizeIndex'
	      		 },{
	          		name: 'tailingIndex'
	      		 }]
	    });

	    var processedOreFilters = new Ext.ux.grid.GridFilters({
	        local: true,
	        filters: [{
				        type: 'int',
				        dataIndex: 'SLNOIndex'
				    },{
			            type: 'int',
			            dataIndex: 'autoIncIdIndex',		            
	        		 },{
			            type: 'string',
			            dataIndex: 'ROMgradeIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'finesIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'lumpsIndex',		            
	        		 },{
		          		type: 'int',
		          		dataIndex: 'oversizeIndex'
		      		 },{
		          		type: 'int',
		          		dataIndex: 'tailingIndex'
		          	 }]
	    });
	    
    var processedOreColModel = new Ext.grid.ColumnModel({
	    columns: [
	     	new Ext.grid.RowNumberer({
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            width : 50
	        }),{
	            header: "<span style=font-weight:bold;>SLNO</span>",
	            width: 30,
	            hidden: true,	            
				dataIndex: 'SLNOIndex'
	        },{
	            header: "<span style=font-weight:bold;>Auto Inc ID</span>",
	            width: 50,
	            hidden: true,	            
				dataIndex: 'autoIncIdIndex'
	        },{
		        header: "<span style=font-weight:bold;>Grade(% Minerals Content)</span>",
		        sortable: true,
		        width:300,
		        dataIndex: 'ROMgradeIndex'
		    },{
		        header: "<span style=font-weight:bold;>fines</span>",
		        sortable: true,
		        width:250,
		        dataIndex: 'finesIndex',
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Lumps</span>",
		        sortable: true,
		        width:200,
		        dataIndex: 'lumpsIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>OverSize</span>",
		        sortable: false,
		        width:200,
		        dataIndex: 'oversizeIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Waste/Tailing</span>",
		        sortable: false,
		        width:250,
		        dataIndex: 'tailingIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    }]
	   });

		var processedOreDetailsStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getOreProcessedDetails',
	            method: 'POST'
	        }),
	        reader: processedOreReader
	    });
	    var selModprocessedOre=new Ext.grid.RowSelectionModel({
	      singleSelect:true
		});
		var processedOreDetailsGrid = new Ext.grid.EditorGridPanel({ 
			title:'Details Of Processed Ore',
			height: 350,
	        width:screen.width-60,
	        autoScroll:true,
	        border: false,
	        store: processedOreDetailsStore,
	        id:'processedOreDetailsGridId',
	        colModel: processedOreColModel,
	        sm		: selModprocessedOre,	        
	        plugins: [processedOreFilters],
	        clicksToEdit: 1,
    	});	
    	processedOreDetailsGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRowsOfOreProductionGrid.split(",");
            var isIn=0;
			for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRowsOfOreProductionGrid = editedRowsOfOreProductionGrid+slno+",";
			}
			if(field!='ROMgradeIndex'){
            	gettotalForROM(field);
            }
            
    	 }
    	});  
    function gettotalForROM(e)
    {
    var ROMtotal = 0;
    	processedOreDetailsGrid.store.each(function(record1)
	    	{
	      		if(record1.data['ROMgradeIndex']!='Total' && record1.data[e]!=''){
					ROMtotal = (parseFloat(parseFloat(ROMtotal))+parseFloat(record1.data[e]));
				}			
	    	})
			processedOreDetailsGrid.store.each(function(record1)
	    	{
	      		if(record1.data['ROMgradeIndex']=='Total'){
					record1.set(e, ROMtotal);
				}			
	    	})
    }
    
		var oversizeReader = new Ext.data.JsonReader({
	      idProperty: 'oversizeRootId',
	      root: 'oversizeRoot',
	      totalProperty: 'total',
	      fields: [{	          		
	          		name: 'SLNOIndex'
	      		 },{	          		
	          		name: 'autoIncIdIndex'
	      		 },{
	          		name: 'oversizeLocationIndex'
	      		 },{
	          		name: 'oversizeOpeningIndex'
	      		 },{
	          		name: 'oversizeGenerationIndex'
	      		 },{
	          		name: 'oversizeProcessedIndex'
	      		 },{
	          		name: 'oversizeClosingStockIndex'
	      		 }]
	    });
	    var oversizeFilters = new Ext.ux.grid.GridFilters({
	        local: true,
	        filters: [{
				        type: 'int',
				        dataIndex: 'SLNOIndex'
				    },{
			            type: 'int',
			            dataIndex: 'autoIncIdIndex',		            
	        		 },{
			            type: 'string',
			            dataIndex: 'oversizeLocationIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'oversizeOpeningIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'oversizeGenerationIndex',		            
	        		 },{
		          		type: 'int',
		          		dataIndex: 'oversizeProcessedIndex'
		      		 },{
		          		type: 'int',
		          		dataIndex: 'oversizeClosingStockIndex'
		          	 }]
	    });
        var OversizeColModel = new Ext.grid.ColumnModel({
	    columns: [
	     	new Ext.grid.RowNumberer({
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            width : 50
	        }),{
	            header: "<span style=font-weight:bold;>SLNO</span>",
	            width: 30,
	            hidden: true,	            
				dataIndex: 'SLNOIndex'
	        },{
	            header: "<span style=font-weight:bold;>Auto Inc ID</span>",
	            width: 50,
	            hidden: true,	            
				dataIndex: 'autoIncIdIndex'
	        },{
		        header: "<span style=font-weight:bold;>Location Of Plant</span>",
		        sortable: true,
		        width:250,
		        dataIndex: 'oversizeLocationIndex',
				editor: new Ext.grid.GridEditor(new Ext.form.TextField({  }))
		    },{
		        header: "<span style=font-weight:bold;>Opening Stock Of Oversize</span>",
		        sortable: true,
		        width:200,
		        dataIndex: 'oversizeOpeningIndex',
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Generation Of Oversize during the month</span>",
		        sortable: true,
		        width:200,
		        dataIndex: 'oversizeGenerationIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Processing of Oversize During the month</span>",
		        sortable: false,
		        width:200,
		        dataIndex: 'oversizeProcessedIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Closing Stock Of Oversize</span>",
		        sortable: false,
		        width:250,
		        dataIndex: 'oversizeClosingStockIndex'
		    }]
	   });

		var OversizeStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getOversizeDetails',
	            method: 'POST'
	        }),
	        reader: oversizeReader
	    });
	    var oversizePlant = Ext.data.Record.create([
              	{name: 'SLNOIndex'},
              	{name: 'autoIncIdIndex'},
              	{name: 'oversizeLocationIndex'},
              	{name: 'oversizeOpeningIndex'},
              	{name: 'oversizeGenerationIndex'},
              	{name: 'oversizeProcessedIndex'},
              	{name: 'oversizeClosingStockIndex'}
        ]);
        var selModOversize=new Ext.grid.RowSelectionModel({
	      singleSelect:true
		});        
		var OversizeGrid = new Ext.grid.EditorGridPanel({ 
			title:'Oversize Crushing/Processing',
			height: 350,
	        width:screen.width-60,
	        autoScroll:true,
	        border: false,
	        store: OversizeStore,
	        id:'OversizeGridId',
	        colModel: OversizeColModel,
	        sm		: selModOversize,	        
	        plugins: [oversizeFilters],
	        clicksToEdit: 1,
	        tbar: [{
            text: 'Add',
            handler : function(){ 
            	var Plant = OversizeGrid.getStore().recordType;
            	newRowAdded++;
            	if(newRowAdded<13){
	                var p = new oversizePlant({
	                   	SLNOIndex:newRowAdded,
	                   	autoIncIdIndex:'',
			      		oversizeLocationIndex:'',
			      		oversizeOpeningIndex:'',
			      		oversizeGenerationIndex:'',
			      		oversizeProcessedIndex:'',
			      		oversizeClosingStockIndex:''
	                });               
	                OversizeGrid.stopEditing();
	                OversizeStore.insert(0, p);
	                OversizeGrid.startEditing(0, 0);
                 }
             }
		}]
    	});	
    	
    	 OversizeGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRowsOfOversizeGrid.split(",");
            var isIn=0;
			for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRowsOfOversizeGrid = editedRowsOfOversizeGrid+slno+",";
			}
			if(field == 'oversizeOpeningIndex' || field == 'oversizeGenerationIndex' || field == 'oversizeProcessedIndex'){
                finalclosingStock(e);
            }
    	 }
    	});    
    	function finalclosingStock(e) {
            
           OversizeGrid.store.each(function(record){
              if(((parseFloat(e.record.data['oversizeOpeningIndex']) + parseFloat(e.record.data['oversizeGenerationIndex']))) >= parseFloat(e.record.data['oversizeProcessedIndex'])){
                 e.record.set('oversizeClosingStockIndex',(parseFloat(e.record.data['oversizeOpeningIndex']) + parseFloat(e.record.data['oversizeGenerationIndex'])) - parseFloat(e.record.data['oversizeProcessedIndex']));        
              }else if(e.record.data['oversizeOpeningIndex']!='' && e.record.data['oversizeGenerationIndex']!='' && e.record.data['oversizeProcessedIndex'])
              {
            	e.record.set('oversizeClosingStockIndex','');
            	e.record.set('oversizeProcessedIndex','');
            	Ext.example.msg("Processing of Oversize should less than sum of Generation of Oversize and Opening Stock of Oversize");
              }
            });
        } 
    	
    	var oversizeProcessingReader = new Ext.data.JsonReader({
	      idProperty: 'oversizeProcessingRootId',
	      root: 'oversizeProcessingRoot',
	      totalProperty: 'total',
	      fields: [{	          		
	          		name: 'SLNOIndex'
	      		 },{	          		
	          		name: 'autoIncIdIndex'
	      		 },{
	          		name: 'overSizeGradeIndex'
	      		 },{
	          		name: 'oversizeFinesIndex'
	      		 },{
	          		name: 'oversizeLumpsIndex'
	      		 },{
	          		name: 'oversizeTailingIndex'
	      		 }]
	    });
	    var oversizeProcessingFilters = new Ext.ux.grid.GridFilters({
	        local: true,
	        filters: [{
				        type: 'int',
				        dataIndex: 'SLNOIndex'
				    },{
			            type: 'int',
			            dataIndex: 'autoIncIdIndex',		            
	        		 },{
			            type: 'string',
			            dataIndex: 'overSizeGradeIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'oversizeFinesIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'oversizeLumpsIndex',		            
	        		 },{
		          		type: 'int',
		          		dataIndex: 'oversizeTailingIndex'
		      		 }]
	    });
     var OversizeProcessingColModel = new Ext.grid.ColumnModel({
	    columns: [
	     	new Ext.grid.RowNumberer({
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            width : 50
	        }),{
	            header: "<span style=font-weight:bold;>SLNO</span>",
	            width: 30,
	            hidden: true,	            
				dataIndex: 'SLNOIndex'
	        },{
	            header: "<span style=font-weight:bold;>Auto Inc ID</span>",
	            width: 50,
	            hidden: true,	            
				dataIndex: 'autoIncIdIndex'
	        },{
		        header: "<span style=font-weight:bold;>Grade(% Minerals Content)</span>",
		        sortable: true,
		        width:300,
		        dataIndex: 'overSizeGradeIndex'
		    },{
		        header: "<span style=font-weight:bold;>fines</span>",
		        sortable: true,
		        width:300,
		        dataIndex: 'oversizeFinesIndex',
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Lumps</span>",
		        sortable: true,
		        width:300,
		        dataIndex: 'oversizeLumpsIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Waste/Tailing</span>",
		        sortable: false,
		        width:300,
		        dataIndex: 'oversizeTailingIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    }]
	   });

		var oversizeProcessingStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getOversizeProcessingDeatils',
	            method: 'POST'
	        }),
	        reader: oversizeProcessingReader
	    });
       var selModoversizeProcessing=new Ext.grid.RowSelectionModel({
	      singleSelect:true
		});        
		var oversizeProcessingGrid = new Ext.grid.EditorGridPanel({
			title:'Details Of Oversize Processing',
			height: 350,
	        width:screen.width-60,
	        autoScroll:true,
	        border: false,
	        store: oversizeProcessingStore,
	        id:'oversizeProcessingGridId',
	        colModel: OversizeProcessingColModel,
	        sm		: selModoversizeProcessing,	        
	        plugins: [oversizeProcessingFilters],
	        clicksToEdit: 1
    	});
         oversizeProcessingGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRowsOfoversizeProcessingGrid.split(",");
            var isIn=0;
			for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRowsOfoversizeProcessingGrid = editedRowsOfoversizeProcessingGrid+slno+",";
			}
			if(field!='overSizeGradeIndex'){
            	gettotalForOversizeProcessing(field);
            }
    	 }
    	});    

    	
    function gettotalForOversizeProcessing(e)
    {
    var oversizetotal = 0;
    var reconciled=0;
    	oversizeProcessingGrid.store.each(function(record1)
	    	{
	      		if(record1.data['overSizeGradeIndex']!='Total' && record1.data[e]!=''){
					oversizetotal = (parseFloat(parseFloat(oversizetotal))+parseFloat(record1.data[e]));
				}			
	    	})
	    oversizeProcessingGrid.store.each(function(record1)
	    	{
	      		if(record1.data['overSizeGradeIndex']!='Reconciled' && record1.data[e]!=''){
					reconciled = (parseFloat(parseFloat(reconciled))+parseFloat(record1.data[e]));
				}			
	    	})
			oversizeProcessingGrid.store.each(function(record1)
	    	{
	      		if(record1.data['overSizeGradeIndex']=='Total'){
					record1.set(e, oversizetotal);
				}			
	    	})
	        oversizeProcessingGrid.store.each(function(record1)
	    	{
	      		if(record1.data['overSizeGradeIndex']=='Reconciled'){
					record1.set(e, reconciled);
				}			
	    	})
    }
    
    
   var productGeneratedReader = new Ext.data.JsonReader({
	      idProperty: 'productGeneratedRootId',
	      root: 'productGeneratedRoot',
	      totalProperty: 'total',
	      fields: [{	          		
	          		name: 'SLNOIndex'
	      		 },{	          		
	          		name: 'autoIncIdIndex'
	      		 },{
	          		name: 'productGradeIndex'
	      		 },{
	          		name: 'ProductOpeningIndex'
	      		 },{
	          		name: 'productIndex'
	      		 },{
	          		name: 'despatchIndex'
	      		 },{
	          		name: 'productClosingIndex'
	      		 }]
	    });
	    
	    var productGeneratedFilters = new Ext.ux.grid.GridFilters({
	        local: true,
	        filters: [{
				        type: 'int',
				        dataIndex: 'SLNOIndex'
				    },{
			            type: 'int',
			            dataIndex: 'autoIncIdIndex',		            
	        		 },{
			            type: 'string',
			            dataIndex: 'productGradeIndex',		            
	        		 },{
			            type: 'int',
			            dataIndex: 'ProductOpeningIndex',		            
	        		 },{
		          		type: 'int',
		          		dataIndex: 'productIndex'
		      		 },{
			            type: 'int',
			            dataIndex: 'despatchIndex',		            
	        		 },{
		          		type: 'int',
		          		dataIndex: 'productClosingIndex'
		      		 }]
	    });
		
		var productGeneratedColModel = new Ext.grid.ColumnModel({
	    columns: [
	     	new Ext.grid.RowNumberer({
	            header : "<span style=font-weight:bold;>SLNO</span>",
	            dataIndex: 'SLNOIndex',
	            width : 50
	        }),{
	            header: "<span style=font-weight:bold;>SLNO</span>",
	            width: 30,
	            hidden: true,	            
				dataIndex: 'SLNOIndex'
	        },{
	            header: "<span style=font-weight:bold;>Auto Inc ID</span>",
	            width: 50,
	            hidden: true,	            
				dataIndex: 'autoIncIdIndex'
	        },{
		        header: "<span style=font-weight:bold;>Grade(% Minerals Content)</span>",
		        sortable: true,
		        width:300,
		        dataIndex: 'productGradeIndex'
		    },{
		        header: "<span style=font-weight:bold;>Opening Stock</span>",
		        sortable: true,
		        width:200,
		        dataIndex: 'ProductOpeningIndex',
				editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Product</span>",
		        sortable: true,
		        width:200,
		        dataIndex: 'productIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Despatch</span>",
		        sortable: true,
		        width:200,
		        dataIndex: 'despatchIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    },{
		        header: "<span style=font-weight:bold;>Closing Stock</span>",
		        sortable: false,
		        width:250,
		        dataIndex: 'productClosingIndex',
		        editor: new Ext.grid.GridEditor(new Ext.form.NumberField({decimalPrecision:2}))
		    }]
	   });
		
		var productGeneratedStore = new Ext.data.GroupingStore({
	        autoLoad: false,
	        proxy: new Ext.data.HttpProxy({
	            url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=getProductionDetails',
	            method: 'POST'
	        }),
	        reader: productGeneratedReader
	    });
	    var selModproductGenerated=new Ext.grid.RowSelectionModel({
	      singleSelect:true
		}); 
		var productGeneratedGrid = new Ext.grid.EditorGridPanel({ 
			title:'Product Generated and Closing balance after Sale/Export',
			height: 620,
	        width:screen.width-60,
	        autoScroll:true,
	        border: false,
	        store: productGeneratedStore,
	        id:'productGeneratedGridId',
	        colModel: productGeneratedColModel,
	        sm		: selModproductGenerated,	        
	        plugins: [productGeneratedFilters],
	        clicksToEdit: 1,
    	});	
        productGeneratedGrid.on({
    	 afteredit: function(e) {
    	 	var field = e.field;
            var slno = e.record.data['SLNOIndex'];
            var temp = editedRowsOfproductGeneratedGrid.split(",");
            var isIn=0;
			for(var i=0;i<temp.length;i++)
			{
				if(temp[i]==slno)
				{
					isIn=1
				}
			}
			if(isIn==0)
			{
				editedRowsOfproductGeneratedGrid = editedRowsOfproductGeneratedGrid+slno+",";
			}
			if(field!='productGradeIndex'){
            	gettotalForClosingBalance(field,e);
            }
    	 }
    	});    

    	
    function gettotalForClosingBalance(field,e)
    {
    var producttotal = 0;
    var reconciled=0;
    var SLNO=0;
    	productGeneratedGrid.store.each(function(record1)
	    	{
	      		if(record1.data['productGradeIndex']!='Total' && record1.data['productGradeIndex']!='Reconciled' && record1.data['productGradeIndex']!='Total Closing Stock Of Oversize' && record1.data['productGradeIndex']!='Total Waste & Tailing' && record1.data[field]!=''){
					producttotal = (parseFloat(parseFloat(producttotal))+parseFloat(record1.data[field]));
				}		
	    	})
			productGeneratedGrid.store.each(function(record1)
	    	{
	      		if(record1.data['productGradeIndex']=='Total'){
					record1.set(field, producttotal);
				}			
	    	})
	
	       productGeneratedGrid.store.each(function(record1)
	    	{
	   
	            if(record1.data['productGradeIndex']=='Total'){
	            SLNO=record1.data['SLNOIndex'];
	            }
				if(record1.data['SLNOIndex']>SLNO && record1.data['productGradeIndex']!='Reconciled' && record1.data[field]!=''){
					reconciled = (parseFloat(parseFloat(reconciled))+parseFloat(record1.data[field]));
				}	
	    	})
			productGeneratedGrid.store.each(function(record1)
	    	{
				if(record1.data['productGradeIndex']=='Reconciled'){
					record1.set(field, reconciled);
				}	
	    	})
    }
    
    
	var innerPanel = new Ext.Panel({
	       standardSubmit: true,
	       collapsible: false,
	       autoScroll: true,
	       width: screen.width-26,
	       height:400,
	       id: 'innerPanelId',
	       layout: 'table',
	       layoutConfig: {
	           columns: 1
	       },
	       items: [ROMProcessingGrid,processedOreDetailsGrid,OversizeGrid,oversizeProcessingGrid,productGeneratedGrid]
   });
	var buttonPanel=new Ext.FormPanel({
       	id: 'buttonid',
       	cls:'colorid',
       	frame:true,
           buttons:[{
              		text: 'Back',
              		cls:'colorid',
              		iconCls:'backbutton',
              		hidden:false,
              		handler : function(){
              		    var reloadPrevRec = "reloadPrevRec";   
						var MonthlyReturnsFormOnePartTwo='/Telematics4uApp/Jsps/IronMining/MonthlyReturnsFormOnePartTwo.jsp?reloadPrevRec='+reloadPrevRec+'&autoGeneratedKeys='+autoGeneratedKeys+'&custId='+custId+'&custName='+custName+'&typeOfOre='+typesOfOre+'&startdate='+'<%=startdate%>'+'&enddate='+'<%=enddate%>'+'&loadForDashboardDetails='+loadForDashboardDetails+'&type='+type;
	              		parent.Ext.getCmp('partFourTab').disable();
	              		parent.Ext.getCmp('partTwoTab').enable();
	              		parent.Ext.getCmp('partTwoTab').show();
						parent.Ext.getCmp('partTwoTab').update("<iframe style='width:100%;height:525px;border:0;' src='"+MonthlyReturnsFormOnePartTwo+"'></iframe>");
						}
              		},{
              		text: 'Save & Continue',
              		cls:'colorid',
              		iconCls:'savebutton',
              		handler : function(){ 
              		Ext.MessageBox.confirm('Confirm', 'Are you sure you want to save?',showResult);
              		}
              }]
	 });
	 	function showResult(btn){
	 	if(btn == 'yes'){
	 	var ROMProcessingJSON = '';
		var oreProcessingJSON = '';
		var oversizeJSON = '';
		var oversizeProcessingJSON = '';
		var productGeneratedJSON='';	
		var ROMProcessingTemp=editedRowsOfRomProcessingGrid.split(",");
	    var oreProcessingTemp = editedRowsOfOreProductionGrid.split(",");
	    var oversizeTemp = editedRowsOfOversizeGrid.split(",");
	    var oversizeProcessingTemp = editedRowsOfoversizeProcessingGrid.split(",");
	    var productGeneratedTemp= editedRowsOfproductGeneratedGrid.split(",");
	    var valid = true;
		isIn=0;
		/*******************************ROM Processing********************************************/
		for(var i=0;i<ROMProcessingTemp.length;i++){
			var row1 = ROMProcessingGrid.store.find('SLNOIndex',ROMProcessingTemp[i]);
			if(row1==-1){
			continue;
		}
		var store1 = ROMProcessingGrid.store.getAt(row1);
		ROMProcessingJSON += Ext.util.JSON.encode(store1.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(ROMProcessingJSON!=''){
			ROMProcessingJSON = ROMProcessingJSON.substring(0, ROMProcessingJSON.length - 1);
		}
		/*******************************Ore Processing********************************************/					
		for(var i=0;i<oreProcessingTemp.length;i++){
			var row2 = processedOreDetailsGrid.store.find('SLNOIndex',oreProcessingTemp[i]);
			if(row2==-1){
			continue;
		}
		var store2 =processedOreDetailsGrid.store.getAt(row2);
		oreProcessingJSON += Ext.util.JSON.encode(store2.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(oreProcessingJSON!=''){
			oreProcessingJSON = oreProcessingJSON.substring(0, oreProcessingJSON.length - 1);
		}
		/*******************************Oversize********************************************/
		for(var i=0;i<oversizeTemp.length;i++){
			var row3 = OversizeGrid.store.find('SLNOIndex',oversizeTemp[i]);
			if(row3==-1){
			continue;
		}
		var store3 =OversizeGrid.store.getAt(row3);
		oversizeJSON += Ext.util.JSON.encode(store3.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(oversizeJSON!=''){
			oversizeJSON = oversizeJSON.substring(0, oversizeJSON.length - 1);
		}
		/*******************************Oversize Processing********************************************/
		for(var i=0;i<oversizeProcessingTemp.length;i++){
			var row4 = oversizeProcessingGrid.store.find('SLNOIndex',oversizeProcessingTemp[i]);
			if(row4==-1){
			continue;
		}
		var store4 =oversizeProcessingGrid.store.getAt(row4);
		oversizeProcessingJSON += Ext.util.JSON.encode(store4.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(oversizeProcessingJSON!=''){
			oversizeProcessingJSON = oversizeProcessingJSON.substring(0, oversizeProcessingJSON.length - 1);
		}
		/*******************************Production details********************************************/
		for(var i=0;i<productGeneratedTemp.length;i++){
			var row4 = productGeneratedGrid.store.find('SLNOIndex',productGeneratedTemp[i]);
			if(row4==-1){
			continue;
		}
		var store4 =productGeneratedGrid.store.getAt(row4);
		productGeneratedJSON += Ext.util.JSON.encode(store4.data) + ',';
		}
		if(valid==false){  										
			return;
		}else if(productGeneratedJSON!=''){
			productGeneratedJSON = productGeneratedJSON.substring(0, productGeneratedJSON.length - 1);
		}
		loadMask.show();
		Ext.Ajax.request({
             url: '<%=request.getContextPath()%>/MonthlyReturnsAction.do?param=insertFormOnePartFour',
             method: 'POST',
             params: {
            		autoGeneratedKeys:autoGeneratedKeys,
            		JSONRomProcessingData:ROMProcessingJSON,
            		JSONOreProcessingData: oreProcessingJSON,
            		JSONOversizeData:oversizeJSON,
            		JSONOversizeProcessingData:oversizeProcessingJSON,
            		JSONProductGeneratedData:productGeneratedJSON									                           	                       
             },
             success: function (response, options) {
                	loadMask.hide();
                    var message = response.responseText;
                    Ext.example.msg(message);
                    var MonthlyReturnsFormOnePartThree='/Telematics4uApp/Jsps/IronMining/MonthlyReturnsFormOnePartThree.jsp?autoGeneratedKeys='+autoGeneratedKeys+'&custId='+custId+'&custName='+custName+'&typeOfOre='+typesOfOre+'&startdate='+'<%=startdate%>'+'&enddate='+'<%=enddate%>'+'&reloadPrevRec='+'<%=reloadPrevRec%>'+'&loadForDashboardDetails='+loadForDashboardDetails+'&type='+type;
       		  		parent.Ext.getCmp('partThreeTab').enable();
					parent.Ext.getCmp('partFourTab').disable();
					parent.Ext.getCmp('partThreeTab').show();
					parent.Ext.getCmp('partThreeTab').update("<iframe style='width:100%;height:525px;border:0;' src='"+MonthlyReturnsFormOnePartThree+"'></iframe>");                              
                    },
             failure: function (response, options) {
                 loadMask.hide();
                 Ext.example.msg("Error");		                                
             }
          });
        }
	 }
	 Ext.onReady(function () {
		    Ext.QuickTips.init();
		    Ext.form.Field.prototype.msgTarget = 'side';
		    outerPanel = new Ext.Panel({
		        title: 'Processing Outside The Mining Lease',		        
		        standardSubmit: true,
		        frame: false,
		        width: screen.width-23,
		        height:495,
		        renderTo: 'content',
		        cls: 'outerpanel',
		        layout: 'table',
		        layoutConfig: {
		            columns: 1
		        },
		        items: [innerPanel,buttonPanel]
		    });
    
		    if(typesOfOre =="Manganese" || typesOfOre =="Bauxite/Laterite" ){
          	processedOreDetailsGrid.getColumnModel().setHidden(processedOreDetailsGrid.getColumnModel().findColumnIndex('lumpsIndex'),true);
          	processedOreDetailsGrid.getColumnModel().setHidden(processedOreDetailsGrid.getColumnModel().findColumnIndex('finesIndex'),true);
          	
          	oversizeProcessingGrid.getColumnModel().setHidden(oversizeProcessingGrid.getColumnModel().findColumnIndex('oversizeFinesIndex'),true);
          	oversizeProcessingGrid.getColumnModel().setHidden(oversizeProcessingGrid.getColumnModel().findColumnIndex('oversizeLumpsIndex'),true);
          	
          	
      }
		    ROMProcessingStore.load({params:{autoGeneratedId:autoGeneratedKeys}});
		    processedOreDetailsStore.load({params:{typeOfOre:'<%=typeOfOre%>',autoGeneratedId:autoGeneratedKeys}});
		    OversizeStore.load({params:{autoGeneratedId:autoGeneratedKeys}});
		    oversizeProcessingStore.load({params:{typeOfOre:'<%=typeOfOre%>',autoGeneratedId:autoGeneratedKeys}});
		    productGeneratedStore.load({params:{typeOfOre:'<%=typeOfOre%>',autoGeneratedId:autoGeneratedKeys}});
		});
	
    </script>
  </body>
</html>
